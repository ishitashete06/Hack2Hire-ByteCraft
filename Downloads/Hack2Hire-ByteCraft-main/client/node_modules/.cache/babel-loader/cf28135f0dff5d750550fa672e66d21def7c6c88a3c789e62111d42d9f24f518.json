{"ast":null,"code":"function manageCache(cache, maxEntries) {\n  const size = cache.size;\n  if (size < maxEntries) return;\n  // randomly start at 0 or 1, delete every other key in a fast way\n  let i = Math.round(Math.random());\n  for (const key of cache.keys()) {\n    if ((++i & 0x1) === 0x1) continue;\n    cache.delete(key);\n  }\n}\n// cache a mapping of arguments to created values in an automatically managed cache\n/** @internal */\nexport function memoize(maxEntries, cache, key, create) {\n  const r = cache.get(key);\n  if (r) return r;\n  manageCache(cache, maxEntries);\n  const g = create(key);\n  cache.set(key, g);\n  return g;\n}","map":{"version":3,"names":["manageCache","cache","maxEntries","size","i","Math","round","random","key","keys","delete","memoize","create","r","get","g","set"],"sources":["../../src/utils/memoize.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,WAAWA,CAACC,KAAoB,EAAEC,UAAkB;EACzD,MAAMC,IAAI,GAAGF,KAAK,CAACE,IAAI;EACvB,IAAIA,IAAI,GAAGD,UAAU,EAAE;EAEvB;EACA,IAAIE,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,CAAC;EACjC,KAAK,MAAMC,GAAG,IAAIP,KAAK,CAACQ,IAAI,EAAE,EAAE;IAC5B,IAAI,CAAC,EAAEL,CAAC,GAAG,GAAG,MAAM,GAAG,EAAE;IACzBH,KAAK,CAACS,MAAM,CAACF,GAAG,CAAC;;AAEzB;AAEA;AACA;AACA,OAAM,SAAUG,OAAOA,CAAOT,UAAkB,EAAED,KAAgB,EAAEO,GAAM,EAAEI,MAAqB;EAC7F,MAAMC,CAAC,GAAGZ,KAAK,CAACa,GAAG,CAACN,GAAG,CAAC;EACxB,IAAIK,CAAC,EAAE,OAAOA,CAAC;EAEfb,WAAW,CAACC,KAAK,EAAEC,UAAU,CAAC;EAC9B,MAAMa,CAAC,GAAGH,MAAM,CAACJ,GAAG,CAAC;EACrBP,KAAK,CAACe,GAAG,CAACR,GAAG,EAAEO,CAAC,CAAC;EACjB,OAAOA,CAAC;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}