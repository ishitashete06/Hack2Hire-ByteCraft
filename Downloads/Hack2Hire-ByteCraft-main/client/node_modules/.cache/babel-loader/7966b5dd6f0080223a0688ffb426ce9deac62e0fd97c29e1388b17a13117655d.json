{"ast":null,"code":"import { getFontVariants } from \"./getFontVariants.js\";\nimport { knownGoogleFontCategories, TypefaceSourceNames } from \"./types.js\";\nexport const googleFontSelectorPrefix = \"GF;\";\n/** @internal */\nexport class GoogleFontSource {\n  name = TypefaceSourceNames.Google;\n  typefaces = [];\n  byFamily = new Map();\n  getTypefaceByFamily(family) {\n    return this.byFamily.get(family) ?? null;\n  }\n  static parseVariant(variant) {\n    if (variant === \"regular\") return {\n      style: \"normal\",\n      weight: 400\n    };\n    // Parse Google Font variant IDs that are formatted like \"100\", \"200\",\n    // \"regular\" and \"400italic\".\n    const match = /([0-9]*)([a-z]*)/.exec(variant);\n    if (!match) return null;\n    const weight = parseInt(match[1] || \"400\");\n    const style = match[2] || \"normal\";\n    return {\n      weight,\n      style\n    };\n  }\n  parseSelector(selector) {\n    if (!selector.startsWith(googleFontSelectorPrefix)) return null;\n    const tokens = selector.split(\"-\");\n    if (tokens.length !== 2) return null;\n    const [family, variant] = tokens;\n    if (!family || !variant) return null;\n    return {\n      family: family.replace(googleFontSelectorPrefix, \"\"),\n      variant,\n      source: this.name\n    };\n  }\n  static createSelector(family, variant) {\n    return `${googleFontSelectorPrefix}${family}-${variant}`;\n  }\n  addTypeface(family) {\n    const typeface = {\n      family: family,\n      fonts: [],\n      source: this.name\n    };\n    this.typefaces.push(typeface);\n    this.byFamily.set(typeface.family, typeface);\n    return typeface;\n  }\n  importFonts(webFonts) {\n    this.typefaces.length = 0;\n    this.byFamily.clear();\n    const fonts = [];\n    webFonts.forEach(webFont => {\n      webFont.variants.forEach(variant => {\n        const family = webFont.family;\n        // Find the parent Typeface for the font (or create it)\n        let typeface = this.getTypefaceByFamily(family);\n        if (!typeface) {\n          typeface = this.addTypeface(family);\n        }\n        const variantInfo = GoogleFontSource.parseVariant(variant) ?? {};\n        const {\n          weight,\n          style\n        } = variantInfo;\n        const selector = GoogleFontSource.createSelector(family, variant);\n        const {\n          variantBold,\n          variantItalic,\n          variantBoldItalic\n        } = getFontVariants(variant, webFont.variants, GoogleFontSource.parseVariant);\n        const font = {\n          typeface,\n          variant,\n          selector,\n          selectorBold: variantBold ? GoogleFontSource.createSelector(family, variantBold) : undefined,\n          selectorBoldItalic: variantBoldItalic ? GoogleFontSource.createSelector(family, variantBoldItalic) : undefined,\n          selectorItalic: variantItalic ? GoogleFontSource.createSelector(family, variantItalic) : undefined,\n          weight,\n          style,\n          category: ensureKnownCategory(webFont.category),\n          file: webFont.files[variant]?.replace(\"http://\", \"https://\")\n        };\n        typeface.fonts.push(font);\n        fonts.push(font);\n      });\n    });\n    return fonts;\n  }\n}\nfunction ensureKnownCategory(category) {\n  if (knownGoogleFontCategories.includes(category)) return category;\n  return undefined;\n}","map":{"version":3,"names":["getFontVariants","knownGoogleFontCategories","TypefaceSourceNames","googleFontSelectorPrefix","GoogleFontSource","name","Google","typefaces","byFamily","Map","getTypefaceByFamily","family","get","parseVariant","variant","style","weight","match","exec","parseInt","parseSelector","selector","startsWith","tokens","split","length","replace","source","createSelector","addTypeface","typeface","fonts","push","set","importFonts","webFonts","clear","forEach","webFont","variants","variantInfo","variantBold","variantItalic","variantBoldItalic","font","selectorBold","undefined","selectorBoldItalic","selectorItalic","category","ensureKnownCategory","file","files","includes"],"sources":["../../../src/render/fonts/GoogleFontSource.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}