{"ast":null,"code":"import { assertNever } from \"../utils/assert.js\";\n/**\n * LazyValue can be used with dynamic imports to load a value asynchronously\n * with Suspense and render it when it's ready.\n */\nexport class LazyValue {\n  resolver;\n  static is(value) {\n    return value instanceof LazyValue;\n  }\n  status;\n  constructor(resolver) {\n    this.resolver = resolver;\n  }\n  /** Preload the value so it can be read() later. */\n  preload() {\n    if (this.status) {\n      const status = this.status;\n      // The value was already preloaded.\n      if (status.type !== \"pending\") return;\n      // The value is currently preloading.\n      return status.promise;\n    }\n    // The value is not preloaded.\n    const promise = this.resolver().then(value => {\n      this.status = {\n        type: \"fulfilled\",\n        value\n      };\n    }, error => {\n      this.status = {\n        type: \"rejected\",\n        error\n      };\n    });\n    this.status = {\n      type: \"pending\",\n      promise\n    };\n    return promise;\n  }\n  /** Synchronously read the value after calling preload() before. */\n  read() {\n    const status = this.status;\n    if (!status) {\n      throw new Error(\"Need to call preload() before read()\");\n    }\n    switch (status.type) {\n      case \"pending\":\n        throw new Error(\"Need to wait for preload() to resolve\");\n      case \"fulfilled\":\n        return status.value;\n      case \"rejected\":\n        throw status.error;\n      default:\n        assertNever(status);\n    }\n  }\n}","map":{"version":3,"names":["assertNever","LazyValue","resolver","is","value","status","constructor","preload","type","promise","then","error","read","Error"],"sources":["../../src/modules/LazyValue.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,WAAW,QAAQ,oBAAoB;AAEhD;;;;AAIA,OAAM,MAAOC,SAAS;EAmBWC,QAAA;EAlB7B,OAAOC,EAAEA,CAAQC,KAAc;IAC3B,OAAOA,KAAK,YAAYH,SAAS;EACrC;EAEQI,MAAM;EAcdC,YAA6BJ,QAA8B;IAA9B,KAAAA,QAAQ,GAARA,QAAQ;EAAyB;EAE9D;EACAK,OAAOA,CAAA;IACH,IAAI,IAAI,CAACF,MAAM,EAAE;MACb,MAAMA,MAAM,GAAG,IAAI,CAACA,MAAM;MAE1B;MACA,IAAIA,MAAM,CAACG,IAAI,KAAK,SAAS,EAAE;MAE/B;MACA,OAAOH,MAAM,CAACI,OAAO;;IAGzB;IACA,MAAMA,OAAO,GAAG,IAAI,CAACP,QAAQ,EAAE,CAACQ,IAAI,CAChCN,KAAK,IAAG;MACJ,IAAI,CAACC,MAAM,GAAG;QACVG,IAAI,EAAE,WAAW;QACjBJ;OACH;IACL,CAAC,EACDO,KAAK,IAAG;MACJ,IAAI,CAACN,MAAM,GAAG;QACVG,IAAI,EAAE,UAAU;QAChBG;OACH;IACL,CAAC,CACJ;IAED,IAAI,CAACN,MAAM,GAAG;MACVG,IAAI,EAAE,SAAS;MACfC;KACH;IAED,OAAOA,OAAO;EAClB;EAEA;EACAG,IAAIA,CAAA;IACA,MAAMP,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,IAAI,CAACA,MAAM,EAAE;MACT,MAAM,IAAIQ,KAAK,CAAC,sCAAsC,CAAC;;IAG3D,QAAQR,MAAM,CAACG,IAAI;MACf,KAAK,SAAS;QACV,MAAM,IAAIK,KAAK,CAAC,uCAAuC,CAAC;MAE5D,KAAK,WAAW;QACZ,OAAOR,MAAM,CAACD,KAAK;MAEvB,KAAK,UAAU;QACX,MAAMC,MAAM,CAACM,KAAK;MAEtB;QACIX,WAAW,CAACK,MAAM,CAAC;;EAE/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}