{"ast":null,"code":"import { Animatable, isAnimatable } from \"../../animation/Animatable/Animatable.js\";\nimport { assertNever } from \"../../utils/assert.js\";\nimport { isReactChild, isReactElement } from \"../../utils/type-guards.js\";\nimport { isFiniteNumber } from \"../utils/isFiniteNumber.js\";\nimport { Rect } from \"./Rect.js\";\nexport const constraintDefaults = {\n  left: null,\n  right: null,\n  top: null,\n  bottom: null,\n  centerX: \"50%\",\n  centerY: \"50%\",\n  aspectRatio: null,\n  parentSize: null,\n  width: 100,\n  height: 100\n};\n/** @internal */\nexport var DimensionType;\n(function (DimensionType) {\n  DimensionType[DimensionType[\"FixedNumber\"] = 0] = \"FixedNumber\";\n  DimensionType[DimensionType[\"Percentage\"] = 1] = \"Percentage\";\n  /** @internal */\n  DimensionType[DimensionType[\"Auto\"] = 2] = \"Auto\";\n  DimensionType[DimensionType[\"FractionOfFreeSpace\"] = 3] = \"FractionOfFreeSpace\";\n  DimensionType[DimensionType[\"Viewport\"] = 4] = \"Viewport\";\n})(DimensionType || (DimensionType = {}));\nexport function isConstraintSupportingChild(child) {\n  if (!isReactChild(child) || !isReactElement(child)) {\n    return false;\n  }\n  // Assume for now that all children support constraints (so they get passed parentSize)\n  return true;\n}\nexport function isConstraintSupportingClass(classToTest) {\n  if (classToTest === null || classToTest === undefined) {\n    return false;\n  }\n  return classToTest.supportsConstraints === true;\n}\n/** @internal */\nexport var ConstraintMask;\n(function (ConstraintMask) {\n  // Modifies the constraint mask to remove invalid (mutually exclusive) options and returns the original.\n  // TODO: this removes major inconsistencies but probably needs to be merged with ConstraintSolver.\n  ConstraintMask.quickfix = constraints => {\n    if (constraints.widthType === DimensionType.Auto || constraints.heightType === DimensionType.Auto) {\n      constraints.aspectRatio = null;\n    }\n    if (isFiniteNumber(constraints.aspectRatio)) {\n      if (constraints.left && constraints.right) {\n        constraints.widthType = DimensionType.FixedNumber;\n      }\n      if (constraints.top && constraints.bottom) {\n        constraints.heightType = DimensionType.FixedNumber;\n      }\n      if (constraints.left && constraints.right && constraints.top && constraints.bottom) {\n        constraints.bottom = false;\n      }\n      if (constraints.widthType !== DimensionType.FixedNumber && constraints.heightType !== DimensionType.FixedNumber) {\n        constraints.heightType = DimensionType.FixedNumber;\n      }\n    }\n    if (constraints.left && constraints.right) {\n      if (constraints.fixedSize || constraints.widthType === DimensionType.Auto || isFiniteNumber(constraints.maxWidth)) {\n        constraints.right = false;\n      }\n      constraints.widthType = DimensionType.FixedNumber;\n    }\n    if (constraints.top && constraints.bottom) {\n      if (constraints.fixedSize || constraints.heightType === DimensionType.Auto || isFiniteNumber(constraints.maxHeight)) {\n        constraints.bottom = false;\n      }\n      constraints.heightType = DimensionType.FixedNumber;\n    }\n    return constraints;\n  };\n})(ConstraintMask || (ConstraintMask = {}));\n/** @internal */\nexport function valueToDimensionType(value) {\n  if (typeof value === \"string\") {\n    const trimmedValue = value.trim();\n    if (trimmedValue === \"auto\") return DimensionType.Auto;\n    if (trimmedValue.endsWith(\"fr\")) return DimensionType.FractionOfFreeSpace;\n    if (trimmedValue.endsWith(\"%\")) return DimensionType.Percentage;\n    if (trimmedValue.endsWith(\"vw\") || trimmedValue.endsWith(\"vh\")) return DimensionType.Viewport;\n  }\n  return DimensionType.FixedNumber;\n}\n/**\n * @internal\n */\nexport var ConstraintValues;\n(function (ConstraintValues) {\n  // Returns concrete current values given some ConstraintProperties.\n  ConstraintValues.fromProperties = props => {\n    const {\n      left,\n      right,\n      top,\n      bottom,\n      width,\n      height,\n      centerX,\n      centerY,\n      aspectRatio,\n      autoSize\n    } = props;\n    const constraints = ConstraintMask.quickfix({\n      left: isFiniteNumber(left) || isAnimatable(left),\n      right: isFiniteNumber(right) || isAnimatable(right),\n      top: isFiniteNumber(top) || isAnimatable(top),\n      bottom: isFiniteNumber(bottom) || isAnimatable(bottom),\n      widthType: valueToDimensionType(width),\n      heightType: valueToDimensionType(height),\n      aspectRatio: aspectRatio || null,\n      fixedSize: autoSize === true\n    });\n    let widthValue = null;\n    let heightValue = null;\n    let widthType = DimensionType.FixedNumber;\n    let heightType = DimensionType.FixedNumber;\n    if (constraints.widthType !== DimensionType.FixedNumber && typeof width === \"string\") {\n      const parsedWidth = parseFloat(width);\n      if (width.endsWith(\"fr\")) {\n        widthType = DimensionType.FractionOfFreeSpace;\n        widthValue = parsedWidth;\n      } else if (width === \"auto\") {\n        widthType = DimensionType.Auto;\n      } else {\n        // Percentage\n        widthType = DimensionType.Percentage;\n        widthValue = parsedWidth / 100;\n      }\n    } else if (width !== undefined && typeof width !== \"string\") {\n      widthValue = Animatable.getNumber(width);\n    }\n    if (constraints.heightType !== DimensionType.FixedNumber && typeof height === \"string\") {\n      const parsedHeight = parseFloat(height);\n      if (height.endsWith(\"fr\")) {\n        heightType = DimensionType.FractionOfFreeSpace;\n        heightValue = parsedHeight;\n      } else if (height === \"auto\") {\n        heightType = DimensionType.Auto;\n      } else {\n        // Percentage\n        heightType = DimensionType.Percentage;\n        heightValue = parseFloat(height) / 100;\n      }\n    } else if (height !== undefined && typeof height !== \"string\") {\n      heightValue = Animatable.getNumber(height);\n    }\n    let centerAnchorX = 0.5;\n    let centerAnchorY = 0.5;\n    if (centerX) {\n      centerAnchorX = parseFloat(centerX) / 100;\n    }\n    if (centerY) {\n      centerAnchorY = parseFloat(centerY) / 100;\n    }\n    return {\n      left: constraints.left ? Animatable.getNumber(left) : null,\n      right: constraints.right ? Animatable.getNumber(right) : null,\n      top: constraints.top ? Animatable.getNumber(top) : null,\n      bottom: constraints.bottom ? Animatable.getNumber(bottom) : null,\n      widthType,\n      heightType,\n      width: widthValue,\n      height: heightValue,\n      aspectRatio: constraints.aspectRatio || null,\n      centerAnchorX: centerAnchorX,\n      centerAnchorY: centerAnchorY\n    };\n  };\n  ConstraintValues.toSize = (values, parentSizeInfo, autoSize, freeSpace) => {\n    let width = null;\n    let height = null;\n    const parentWidth = parentSizeInfo?.sizing ? Animatable.getNumber(parentSizeInfo?.sizing.width) : null;\n    const parentHeight = parentSizeInfo?.sizing ? Animatable.getNumber(parentSizeInfo?.sizing.height) : null;\n    const hOpposingPinsOffset = pinnedOffset(values.left, values.right);\n    if (parentWidth && isFiniteNumber(hOpposingPinsOffset)) {\n      width = parentWidth - hOpposingPinsOffset;\n    } else if (autoSize && values.widthType === DimensionType.Auto) {\n      width = autoSize.width;\n    } else if (isFiniteNumber(values.width)) {\n      switch (values.widthType) {\n        case DimensionType.FixedNumber:\n          width = values.width;\n          break;\n        case DimensionType.FractionOfFreeSpace:\n          // set width/height to null if freeSpace is not available, so we would fallback to the default value\n          // see: https://github.com/framer/FramerStudio/pull/3345\n          width = freeSpace ? freeSpace.freeSpaceInParent.width / freeSpace.freeSpaceUnitDivisor.width * values.width : null;\n          break;\n        case DimensionType.Percentage:\n        case DimensionType.Viewport:\n          if (parentWidth) {\n            width = parentWidth * values.width;\n          }\n          break;\n        case DimensionType.Auto:\n          break;\n        default:\n          assertNever(values.widthType);\n      }\n    }\n    const vOpposingPinsOffset = pinnedOffset(values.top, values.bottom);\n    if (parentHeight && isFiniteNumber(vOpposingPinsOffset)) {\n      height = parentHeight - vOpposingPinsOffset;\n    } else if (autoSize && values.heightType === DimensionType.Auto) {\n      height = autoSize.height;\n    } else if (isFiniteNumber(values.height)) {\n      switch (values.heightType) {\n        case DimensionType.FixedNumber:\n          height = values.height;\n          break;\n        case DimensionType.FractionOfFreeSpace:\n          // set width/height to null if freeSpace is not available, so we would fallback to the default value\n          // see: https://github.com/framer/FramerStudio/pull/3345\n          height = freeSpace ? freeSpace.freeSpaceInParent.height / freeSpace.freeSpaceUnitDivisor.height * values.height : null;\n          break;\n        case DimensionType.Percentage:\n        case DimensionType.Viewport:\n          if (parentHeight) {\n            height = parentHeight * values.height;\n          }\n          break;\n        case DimensionType.Auto:\n          break;\n        default:\n          assertNever(values.heightType);\n      }\n    }\n    return sizeAfterApplyingConstraintsAndAspectRatio(width, height, values, {\n      height: parentHeight ?? 0,\n      width: parentWidth ?? 0\n    }, parentSizeInfo?.viewport);\n  };\n  // Returns a parent-relative rect given concrete ConstraintValues.\n  ConstraintValues.toRect = (values,\n  // Normally we would use the same parentSize to calculate the node's size (width/height) and postiion (x/y), but\n  // for non-position-fixed nodes using vw/vh, the size is based on the viewport size, while its position should\n  // still be calculated via its parent's size.\n  parentSizeInfo = null, autoSize = null, pixelAlign = false,\n  // This argument is actually never used, because fractional sizes are\n  // always calculated by it's parent to static sizes\n  freeSpace = null) => {\n    let x = values.left || 0;\n    let y = values.top || 0;\n    const {\n      width,\n      height\n    } = ConstraintValues.toSize(values, parentSizeInfo, autoSize, freeSpace);\n    const parentSizeForPositioning = parentSizeInfo?.positioning ?? null;\n    const positioningParentWidth = parentSizeForPositioning ? Animatable.getNumber(parentSizeForPositioning.width) : null;\n    const positioningParentHeight = parentSizeForPositioning ? Animatable.getNumber(parentSizeForPositioning.height) : null;\n    if (values.left !== null) {\n      x = values.left;\n    } else if (positioningParentWidth && values.right !== null) {\n      x = positioningParentWidth - values.right - width;\n    } else if (positioningParentWidth) {\n      x = values.centerAnchorX * positioningParentWidth - width / 2;\n    }\n    if (values.top !== null) {\n      y = values.top;\n    } else if (positioningParentHeight && values.bottom !== null) {\n      y = positioningParentHeight - values.bottom - height;\n    } else if (positioningParentHeight) {\n      y = values.centerAnchorY * positioningParentHeight - height / 2;\n    }\n    const f = {\n      x,\n      y,\n      width,\n      height\n    };\n    if (pixelAlign) {\n      return Rect.pixelAligned(f);\n    }\n    return f;\n  };\n})(ConstraintValues || (ConstraintValues = {}));\nconst defaultWidth = 200;\nconst defaultHeight = 200;\nfunction getConstraintValue(constraint, value, parentSize, viewport) {\n  if (typeof value === \"string\") {\n    if (value.endsWith(\"%\") && parentSize) {\n      switch (constraint) {\n        case \"maxWidth\":\n        case \"minWidth\":\n          return parseFloat(value) / 100 * parentSize.width;\n        case \"maxHeight\":\n        case \"minHeight\":\n          return parseFloat(value) / 100 * parentSize.height;\n        default:\n          break;\n      }\n    }\n    if (value.endsWith(\"vh\") && viewport) {\n      switch (constraint) {\n        case \"maxWidth\":\n        case \"minWidth\":\n          return parseFloat(value) / 100 * viewport.width;\n        case \"maxHeight\":\n        case \"minHeight\":\n          return parseFloat(value) / 100 * viewport.height;\n        default:\n          break;\n      }\n    }\n    return parseFloat(value);\n  }\n  return value;\n}\nfunction constrainHeight(height, values, parentSize, viewport) {\n  if (values.minHeight) {\n    height = Math.max(getConstraintValue(\"minHeight\", values.minHeight, parentSize, viewport), height);\n  }\n  if (values.maxHeight) {\n    height = Math.min(getConstraintValue(\"maxHeight\", values.maxHeight, parentSize, viewport), height);\n  }\n  return height;\n}\nfunction constrainWidth(width, values, parentSize, viewport) {\n  if (values.minWidth) {\n    width = Math.max(getConstraintValue(\"minWidth\", values.minWidth, parentSize, viewport), width);\n  }\n  if (values.maxWidth) {\n    width = Math.min(getConstraintValue(\"maxWidth\", values.maxWidth, parentSize, viewport), width);\n  }\n  return width;\n}\nfunction sizeAfterApplyingConstraintsAndAspectRatio(width, height, values, parentSize, viewport) {\n  let w = constrainWidth(isFiniteNumber(width) ? width : defaultWidth, values, parentSize, viewport);\n  let h = constrainHeight(isFiniteNumber(height) ? height : defaultHeight, values, parentSize, viewport);\n  if (isFiniteNumber(values.aspectRatio) && values.aspectRatio > 0) {\n    if (isFiniteNumber(values.left) && isFiniteNumber(values.right)) {\n      h = w / values.aspectRatio;\n    } else if (isFiniteNumber(values.top) && isFiniteNumber(values.bottom)) {\n      w = h * values.aspectRatio;\n    } else if (values.widthType !== DimensionType.FixedNumber) {\n      h = w / values.aspectRatio;\n    } else {\n      w = h * values.aspectRatio;\n    }\n  }\n  return {\n    width: w,\n    height: h\n  };\n}\nfunction pinnedOffset(start, end) {\n  if (!isFiniteNumber(start) || !isFiniteNumber(end)) return null;\n  return start + end;\n}\n/** @internal */\nexport function getMergedConstraintsProps(props, constraints) {\n  const result = {};\n  if (props.constraints) {\n    result.constraints = {\n      ...props.constraints,\n      ...constraints\n    };\n  } else {\n    Object.assign(result, constraints);\n  }\n  return result;\n}","map":{"version":3,"names":["Animatable","isAnimatable","assertNever","isReactChild","isReactElement","isFiniteNumber","Rect","constraintDefaults","left","right","top","bottom","centerX","centerY","aspectRatio","parentSize","width","height","DimensionType","isConstraintSupportingChild","child","isConstraintSupportingClass","classToTest","undefined","supportsConstraints","ConstraintMask","quickfix","constraints","widthType","Auto","heightType","FixedNumber","fixedSize","maxWidth","maxHeight","valueToDimensionType","value","trimmedValue","trim","endsWith","FractionOfFreeSpace","Percentage","Viewport","ConstraintValues","fromProperties","props","autoSize","widthValue","heightValue","parsedWidth","parseFloat","getNumber","parsedHeight","centerAnchorX","centerAnchorY","toSize","values","parentSizeInfo","freeSpace","parentWidth","sizing","parentHeight","hOpposingPinsOffset","pinnedOffset","freeSpaceInParent","freeSpaceUnitDivisor","vOpposingPinsOffset","sizeAfterApplyingConstraintsAndAspectRatio","viewport","toRect","pixelAlign","x","y","parentSizeForPositioning","positioning","positioningParentWidth","positioningParentHeight","f","pixelAligned","defaultWidth","defaultHeight","getConstraintValue","constraint","constrainHeight","minHeight","Math","max","min","constrainWidth","minWidth","w","h","start","end","getMergedConstraintsProps","result","Object","assign"],"sources":["../../../src/render/types/Constraints.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}