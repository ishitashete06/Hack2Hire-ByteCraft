{"ast":null,"code":"import { getFontVariants } from \"./getFontVariants.js\";\nimport { TypefaceSourceNames } from \"./types.js\";\nexport const fontsharePrefix = \"FS;\";\n/** @internal */\nconst weightNameToNumber = {\n  thin: 100,\n  hairline: 100,\n  extralight: 200,\n  light: 300,\n  regular: 400,\n  medium: 500,\n  semibold: 600,\n  bold: 700,\n  extrabold: 800,\n  ultra: 800,\n  black: 900,\n  heavy: 900 // Alternative name for \"black\".\n};\n/** @internal */\nconst weightNames = Object.keys(weightNameToNumber);\n/** @internal */\n// Match any of the weight names at the start of the variant string.\nconst allowedVariantsRegex = new RegExp(`^(${[...weightNames, \"italic\"].join(\"|\")})`);\n/** @internal */\nexport class FontshareSource {\n  name = TypefaceSourceNames.Fontshare;\n  typefaces = [];\n  byFamily = new Map();\n  getTypefaceByFamily(family) {\n    return this.byFamily.get(family) ?? null;\n  }\n  /**\n   * Parses variant a string into a weight number and style, defaulting to a\n   * weight of `400` and/or a style of `\"normal\"` depending on what isn't\n   * present in the variant string.\n   *\n   * E.g:\n   *   - `\"bold\"` becomes `{ weight: 700, style: \"normal\" }`\n   *   - `\"bold italic\"` becomes `{ weight: 700, style: \"italic\" }`\n   *   - `\"italic\"` becomes `{ weight: 400, style: \"italic\" }`\n   */\n  static parseVariant(variant) {\n    const variantSplit = variant.split(\" \");\n    const weightName = weightNames.find(weightName => {\n      return variantSplit.includes(weightName);\n    });\n    const styleName = variant.includes(\"italic\") ? \"italic\" : \"normal\";\n    const weight = weightName && weightNameToNumber[weightName] || 400;\n    const style = styleName === \"italic\" ? styleName : \"normal\";\n    return {\n      weight,\n      style\n    };\n  }\n  parseSelector(selector) {\n    if (!selector.startsWith(fontsharePrefix)) return null;\n    const tokens = selector.split(\"-\");\n    if (tokens.length !== 2) return null;\n    const [family, variant] = tokens;\n    if (!family || !variant) return null;\n    return {\n      family: family.replace(fontsharePrefix, \"\"),\n      variant,\n      source: this.name\n    };\n  }\n  static createSelector(family, variant) {\n    return `${fontsharePrefix}${family}-${variant}`;\n  }\n  addTypeface(typeface) {\n    this.typefaces.push(typeface);\n    this.byFamily.set(typeface.family, typeface);\n  }\n  importFonts(fontshareFonts) {\n    this.typefaces.length = 0;\n    this.byFamily.clear();\n    const fonts = [];\n    for (const fontshareFont of fontshareFonts) {\n      const fontStyles = fontshareFont.font_styles.filter(fontStyle => {\n        const variant = fontStyle.name.toLowerCase();\n        // We exclude variants that don't map directly to a CSS\n        // `font-weight`. For example, variants such as \"hairline\",\n        // \"semilight\", \"zero\" or \"variable\" etc. We also don't support\n        // the ability to select `font-stretch` in the properties\n        // panel, so we also exclude any variant that has a \"wide\"\n        // suffix.\n        const allowedVariantMatch = allowedVariantsRegex.exec(variant);\n        if (!allowedVariantMatch || variant.endsWith(\"wide\")) {\n          return false;\n        }\n        return true;\n      });\n      for (const fontStyle of fontStyles) {\n        const {\n          name: family\n        } = fontshareFont;\n        const variant = fontStyle.name.toLowerCase();\n        let typeface = this.getTypefaceByFamily(family);\n        if (!typeface) {\n          typeface = {\n            family: family,\n            fonts: [],\n            source: this.name\n          };\n          this.addTypeface(typeface);\n        }\n        const selector = FontshareSource.createSelector(family, variant);\n        const variantInfo = FontshareSource.parseVariant(variant) || {\n          weight: undefined,\n          style: undefined\n        };\n        const {\n          weight,\n          style\n        } = variantInfo;\n        const {\n          variantBold,\n          variantBoldItalic,\n          variantItalic\n        } = getFontVariants(variant, fontStyles, FontshareSource.parseVariant);\n        const font = {\n          typeface,\n          variant,\n          selector,\n          selectorBold: variantBold ? FontshareSource.createSelector(family, variantBold) : undefined,\n          selectorBoldItalic: variantBoldItalic ? FontshareSource.createSelector(family, variantBoldItalic) : undefined,\n          selectorItalic: variantItalic ? FontshareSource.createSelector(family, variantItalic) : undefined,\n          weight,\n          style,\n          file: fontStyle.file\n        };\n        typeface.fonts.push(font);\n        fonts.push(font);\n      }\n    }\n    return fonts;\n  }\n}","map":{"version":3,"names":["getFontVariants","TypefaceSourceNames","fontsharePrefix","weightNameToNumber","thin","hairline","extralight","light","regular","medium","semibold","bold","extrabold","ultra","black","heavy","weightNames","Object","keys","allowedVariantsRegex","RegExp","join","FontshareSource","name","Fontshare","typefaces","byFamily","Map","getTypefaceByFamily","family","get","parseVariant","variant","variantSplit","split","weightName","find","includes","styleName","weight","style","parseSelector","selector","startsWith","tokens","length","replace","source","createSelector","addTypeface","typeface","push","set","importFonts","fontshareFonts","clear","fonts","fontshareFont","fontStyles","font_styles","filter","fontStyle","toLowerCase","allowedVariantMatch","exec","endsWith","variantInfo","undefined","variantBold","variantBoldItalic","variantItalic","font","selectorBold","selectorBoldItalic","selectorItalic","file"],"sources":["../../../src/render/fonts/FontshareSource.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}