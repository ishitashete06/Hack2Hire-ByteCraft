{"ast":null,"code":"// NOTE: This file is a copy of `framerjs/shared/src/assert.ts` this was done to\n// prevent pulling in files from outside library.\n/**\n * Throws an error when the condition is falsy, optionally pass in a message to\n * describe the error.\n *\n * Best to use asserts where data is about to be stored. Then errors are caught\n * early, close to the cause. Otherwise data with broken expectation might hang\n * around, only to cause errors when used later on, with no pointer back to what\n * caused that bad state.\n *\n * Note that when an assert fails, consider that a fatal error caused by buggy\n * code. The program should halt, or perhaps do some kind of high level\n * recovery, and the bug should be reported and fixed. Asserts are not well\n * suited to use as defensive programming, but are good to use to quickly\n * highlight mistakes while writing new code.\n *\n * Also note asserts should not have side effects, the program should continue\n * to work when asserts are compiled away. Because asserts might be compiled\n * away in production code.\n *\n * And finally, both the condition should be cheap, and the message should not\n * do string interpolation, instead you can pass in multiple parts of the\n * message.\n */\nexport function assert(condition, ...msg) {\n  if (condition) return;\n  const e = Error(\"Assertion Error\" + (msg.length > 0 ? \": \" + msg.join(\" \") : \"\"));\n  // Hack the stack so the assert call itself disappears. Works in jest and in chrome.\n  if (e.stack) {\n    try {\n      const lines = e.stack.split(\"\\n\");\n      if (lines[1]?.includes(\"assert\")) {\n        lines.splice(1, 1);\n        e.stack = lines.join(\"\\n\");\n      } else if (lines[0]?.includes(\"assert\")) {\n        lines.splice(0, 1);\n        e.stack = lines.join(\"\\n\");\n      }\n    } catch {\n      // nothing\n    }\n  }\n  throw e;\n}\n/**\n * Asserts that a code path is never entered. Additionally, asserts that the provided\n * value is evaluated to `never` by the type system, which means all possible discrete\n * types have been exhaustively checked by the time this statement is reached.\n */\nexport function assertNever(x, error) {\n  throw error || new Error(x ? `Unexpected value: ${x}` : \"Application entered invalid state\");\n}","map":{"version":3,"names":["assert","condition","msg","e","Error","length","join","stack","lines","split","includes","splice","assertNever","x","error"],"sources":["../../src/utils/assert.ts"],"sourcesContent":[null],"mappings":"AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAM,SAAUA,MAAMA,CAACC,SAAc,EAAE,GAAGC,GAAU;EAChD,IAAID,SAAS,EAAE;EAEf,MAAME,CAAC,GAAGC,KAAK,CAAC,iBAAiB,IAAIF,GAAG,CAACG,MAAM,GAAG,CAAC,GAAG,IAAI,GAAGH,GAAG,CAACI,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;EACjF;EACA,IAAIH,CAAC,CAACI,KAAK,EAAE;IACT,IAAI;MACA,MAAMC,KAAK,GAAGL,CAAC,CAACI,KAAK,CAACE,KAAK,CAAC,IAAI,CAAC;MACjC,IAAID,KAAK,CAAC,CAAC,CAAC,EAAEE,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC9BF,KAAK,CAACG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QAClBR,CAAC,CAACI,KAAK,GAAGC,KAAK,CAACF,IAAI,CAAC,IAAI,CAAC;OAC7B,MAAM,IAAIE,KAAK,CAAC,CAAC,CAAC,EAAEE,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACrCF,KAAK,CAACG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QAClBR,CAAC,CAACI,KAAK,GAAGC,KAAK,CAACF,IAAI,CAAC,IAAI,CAAC;;KAEjC,CAAC,MAAM;MACJ;IAAA;;EAGR,MAAMH,CAAC;AACX;AAEA;;;;;AAKA,OAAM,SAAUS,WAAWA,CAACC,CAAQ,EAAEC,KAAW;EAC7C,MAAMA,KAAK,IAAI,IAAIV,KAAK,CAACS,CAAC,GAAG,qBAAqBA,CAAC,EAAE,GAAG,mCAAmC,CAAC;AAChG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}