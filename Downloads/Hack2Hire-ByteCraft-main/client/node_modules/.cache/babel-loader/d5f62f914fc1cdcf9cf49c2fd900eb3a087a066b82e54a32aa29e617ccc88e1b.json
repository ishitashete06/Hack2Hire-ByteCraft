{"ast":null,"code":"import { isString } from \"../../utils/utils.js\";\n/** @internal */\nexport function getFontVariants(currentVariant, variants, parseVariant) {\n  if (variants.length === 0) return {};\n  const currentVariantInfo = parseVariant(currentVariant);\n  if (!currentVariantInfo) return {};\n  const {\n    weight: currentWeight,\n    style: currentStyle\n  } = currentVariantInfo;\n  const variantByWeightAndStyle = new Map();\n  const boldVariantByStyle = new Map();\n  variants.forEach(variant => {\n    const variantName = isString(variant) ? variant : variant.name.toLocaleLowerCase();\n    const variantInfo = parseVariant(variantName);\n    if (!variantInfo) return;\n    variantByWeightAndStyle.set(`${variantInfo.weight}-${variantInfo.style}`, variantName);\n    if (variantInfo.weight <= currentWeight) return;\n    if (!boldVariantByStyle.has(variantInfo.style)) {\n      boldVariantByStyle.set(variantInfo.style, variantName);\n    }\n  });\n  // Follow the relative weights convention when possible. If those weights aren't available, load the \"next\" bolder variant\n  // More in https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\n  let variantBold = boldVariantByStyle.get(currentStyle);\n  let variantBoldItalic = boldVariantByStyle.get(\"italic\") ?? boldVariantByStyle.get(\"oblique\");\n  if (currentVariantInfo.weight <= 300) {\n    variantBold = variantByWeightAndStyle.get(`400-${currentStyle}`) ?? variantBold;\n    variantBoldItalic = variantByWeightAndStyle.get(\"400-italic\") ?? variantByWeightAndStyle.get(\"400-oblique\") ?? variantBoldItalic;\n  } else if (currentVariantInfo.weight <= 500) {\n    variantBold = variantByWeightAndStyle.get(`700-${currentStyle}`) ?? variantBold;\n    variantBoldItalic = variantByWeightAndStyle.get(\"700-italic\") ?? variantByWeightAndStyle.get(\"700-oblique\") ?? variantBoldItalic;\n  } else {\n    variantBold = variantByWeightAndStyle.get(`900-${currentStyle}`) ?? variantBold;\n    variantBoldItalic = variantByWeightAndStyle.get(\"900-italic\") ?? variantByWeightAndStyle.get(\"900-oblique\") ?? variantBoldItalic;\n  }\n  // Follow the `font-style: italic` defaults logic as stated in\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/font-style\n  const variantItalic = variantByWeightAndStyle.get(`${currentWeight}-italic`) ?? variantByWeightAndStyle.get(`${currentWeight}-oblique`);\n  return {\n    variantBold,\n    variantItalic,\n    variantBoldItalic\n  };\n}","map":{"version":3,"names":["isString","getFontVariants","currentVariant","variants","parseVariant","length","currentVariantInfo","weight","currentWeight","style","currentStyle","variantByWeightAndStyle","Map","boldVariantByStyle","forEach","variant","variantName","name","toLocaleLowerCase","variantInfo","set","has","variantBold","get","variantBoldItalic","variantItalic"],"sources":["../../../src/render/fonts/getFontVariants.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,QAAQ,QAAQ,sBAAsB;AAI/C;AACA,OAAM,SAAUC,eAAeA,CAC3BC,cAAsB,EACtBC,QAAqC,EACrCC,YAAqD;EAMrD,IAAID,QAAQ,CAACE,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;EAEpC,MAAMC,kBAAkB,GAAGF,YAAY,CAACF,cAAc,CAAC;EACvD,IAAI,CAACI,kBAAkB,EAAE,OAAO,EAAE;EAElC,MAAM;IAAEC,MAAM,EAAEC,aAAa;IAAEC,KAAK,EAAEC;EAAY,CAAE,GAAGJ,kBAAkB;EACzE,MAAMK,uBAAuB,GAAG,IAAIC,GAAG,EAAkB;EACzD,MAAMC,kBAAkB,GAAG,IAAID,GAAG,EAAkB;EAEpDT,QAAQ,CAACW,OAAO,CAACC,OAAO,IAAG;IACvB,MAAMC,WAAW,GAAWhB,QAAQ,CAACe,OAAO,CAAC,GAAGA,OAAO,GAAGA,OAAO,CAACE,IAAI,CAACC,iBAAiB,EAAE;IAE1F,MAAMC,WAAW,GAAGf,YAAY,CAACY,WAAW,CAAC;IAC7C,IAAI,CAACG,WAAW,EAAE;IAElBR,uBAAuB,CAACS,GAAG,CAAC,GAAGD,WAAW,CAACZ,MAAM,IAAIY,WAAW,CAACV,KAAK,EAAE,EAAEO,WAAW,CAAC;IACtF,IAAIG,WAAW,CAACZ,MAAM,IAAIC,aAAa,EAAE;IAEzC,IAAI,CAACK,kBAAkB,CAACQ,GAAG,CAACF,WAAW,CAACV,KAAK,CAAC,EAAE;MAC5CI,kBAAkB,CAACO,GAAG,CAACD,WAAW,CAACV,KAAK,EAAEO,WAAW,CAAC;;EAE9D,CAAC,CAAC;EAEF;EACA;EACA,IAAIM,WAAW,GAAuBT,kBAAkB,CAACU,GAAG,CAACb,YAAY,CAAC;EAC1E,IAAIc,iBAAiB,GAAuBX,kBAAkB,CAACU,GAAG,CAAC,QAAQ,CAAC,IAAIV,kBAAkB,CAACU,GAAG,CAAC,SAAS,CAAC;EAEjH,IAAIjB,kBAAkB,CAACC,MAAM,IAAI,GAAG,EAAE;IAClCe,WAAW,GAAGX,uBAAuB,CAACY,GAAG,CAAC,OAAOb,YAAY,EAAE,CAAC,IAAIY,WAAW;IAE/EE,iBAAiB,GACbb,uBAAuB,CAACY,GAAG,CAAC,YAAY,CAAC,IAAIZ,uBAAuB,CAACY,GAAG,CAAC,aAAa,CAAC,IAAIC,iBAAiB;GACnH,MAAM,IAAIlB,kBAAkB,CAACC,MAAM,IAAI,GAAG,EAAE;IACzCe,WAAW,GAAGX,uBAAuB,CAACY,GAAG,CAAC,OAAOb,YAAY,EAAE,CAAC,IAAIY,WAAW;IAE/EE,iBAAiB,GACbb,uBAAuB,CAACY,GAAG,CAAC,YAAY,CAAC,IAAIZ,uBAAuB,CAACY,GAAG,CAAC,aAAa,CAAC,IAAIC,iBAAiB;GACnH,MAAM;IACHF,WAAW,GAAGX,uBAAuB,CAACY,GAAG,CAAC,OAAOb,YAAY,EAAE,CAAC,IAAIY,WAAW;IAE/EE,iBAAiB,GACbb,uBAAuB,CAACY,GAAG,CAAC,YAAY,CAAC,IAAIZ,uBAAuB,CAACY,GAAG,CAAC,aAAa,CAAC,IAAIC,iBAAiB;;EAGpH;EACA;EACA,MAAMC,aAAa,GACfd,uBAAuB,CAACY,GAAG,CAAC,GAAGf,aAAa,SAAS,CAAC,IACtDG,uBAAuB,CAACY,GAAG,CAAC,GAAGf,aAAa,UAAU,CAAC;EAE3D,OAAO;IAAEc,WAAW;IAAEG,aAAa;IAAED;EAAiB,CAAE;AAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}