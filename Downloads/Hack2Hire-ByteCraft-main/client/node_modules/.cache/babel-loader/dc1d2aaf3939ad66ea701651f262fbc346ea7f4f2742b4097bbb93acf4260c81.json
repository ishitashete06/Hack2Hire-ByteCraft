{"ast":null,"code":"import { useContext, useMemo } from \"react\";\nimport { LayoutIdContext } from \"../../components/AnimateLayout/LayoutIdContext.js\";\n/**\n * @internal\n */\nexport function useLayoutId(props, {\n  specificLayoutId,\n  postfix\n} = {}) {\n  const {\n    name,\n    layoutIdKey,\n    duplicatedFrom,\n    __fromCodeComponentNode = false,\n    drag\n  } = props;\n  const {\n    getLayoutId,\n    enabled\n  } = useContext(LayoutIdContext);\n  return useMemo(() => {\n    // If automatic layoutId's are disabled, but a Frame is used in code, and provides a layoutId, always use it.\n    if (!enabled) return props.layoutId;\n    const existingLayoutId = specificLayoutId || props.layoutId;\n    // If no existing layoutId is provided, we do not generate a layoutId if:\n    // - No id is provided (a requirement for generating layoutIds)\n    // - The layer is not draggable, because magic motion and dragging are not supported (drag)\n    // - The layer should not be animated with magic motion (layoutIdKey)\n    // - The layer is the direct child of a ComponentContainer (Scroll/Page should always use specificLayoutId)\n    if (!existingLayoutId) {\n      if (drag || !layoutIdKey || __fromCodeComponentNode) return undefined;\n    }\n    // If provided, use an existing layoutId, otherwise generate one with the LayoutIdContext.\n    const layoutIdCandidate = existingLayoutId || getLayoutId({\n      id: layoutIdKey,\n      name,\n      duplicatedFrom\n    });\n    // If for some reason we can't generate a layoutId, don't provide a layoutId.\n    if (!layoutIdCandidate) return undefined;\n    // If we have provided a postfix, postfix whatever layoutId we've decided to use with the string, and return it.\n    return postfix ? `${layoutIdCandidate}-${postfix}` : layoutIdCandidate;\n  }, [enabled]); // Must return a stable value as layoutIds must be stable between all renders.\n}","map":{"version":3,"names":["useContext","useMemo","LayoutIdContext","useLayoutId","props","specificLayoutId","postfix","name","layoutIdKey","duplicatedFrom","__fromCodeComponentNode","drag","getLayoutId","enabled","layoutId","existingLayoutId","undefined","layoutIdCandidate","id"],"sources":["../../../src/render/utils/useLayoutId.ts"],"sourcesContent":[null],"mappings":"AAEA,SAASA,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAC3C,SAASC,eAAe,QAAQ,mDAAmD;AAgBnF;;;AAGA,OAAM,SAAUC,WAAWA,CACvBC,KAA0B,EAC1B;EAAEC,gBAAgB;EAAEC;AAAO,IAAsD,EAAE;EAEnF,MAAM;IAAEC,IAAI;IAAEC,WAAW;IAAEC,cAAc;IAAEC,uBAAuB,GAAG,KAAK;IAAEC;EAAI,CAAE,GAAGP,KAAK;EAC1F,MAAM;IAAEQ,WAAW;IAAEC;EAAO,CAAE,GAAGb,UAAU,CAACE,eAAe,CAAC;EAE5D,OAAOD,OAAO,CAAqB,MAAK;IACpC;IACA,IAAI,CAACY,OAAO,EAAE,OAAOT,KAAK,CAACU,QAAQ;IAEnC,MAAMC,gBAAgB,GAAGV,gBAAgB,IAAID,KAAK,CAACU,QAAQ;IAE3D;IACA;IACA;IACA;IACA;IACA,IAAI,CAACC,gBAAgB,EAAE;MACnB,IAAIJ,IAAI,IAAI,CAACH,WAAW,IAAIE,uBAAuB,EAAE,OAAOM,SAAS;;IAGzE;IACA,MAAMC,iBAAiB,GAAGF,gBAAgB,IAAIH,WAAW,CAAC;MAAEM,EAAE,EAAEV,WAAW;MAAED,IAAI;MAAEE;IAAc,CAAE,CAAC;IAEpG;IACA,IAAI,CAACQ,iBAAiB,EAAE,OAAOD,SAAS;IAExC;IACA,OAAOV,OAAO,GAAG,GAAGW,iBAAiB,IAAIX,OAAO,EAAE,GAAGW,iBAAiB;EAC1E,CAAC,EAAE,CAACJ,OAAO,CAAC,CAAC,EAAC;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}