{"ast":null,"code":"import { roundedNumber } from \"../utils/roundedNumber.js\";\nimport { Point } from \"./Point.js\";\n/**\n * @public\n */\nexport var Rect;\n(function (Rect) {\n  /**\n   *\n   * @param rect -\n   * @param other -\n   * @public\n   */\n  function equals(rect, other) {\n    if (rect === other) return true;\n    if (!rect || !other) return false;\n    return rect.x === other.x && rect.y === other.y && rect.width === other.width && rect.height === other.height;\n  }\n  Rect.equals = equals;\n  /** @internal */\n  Rect.atOrigin = size => {\n    return {\n      ...size,\n      x: 0,\n      y: 0\n    };\n  };\n  /** @internal */\n  Rect.fromTwoPoints = (a, b) => {\n    return {\n      x: Math.min(a.x, b.x),\n      y: Math.min(a.y, b.y),\n      width: Math.abs(a.x - b.x),\n      height: Math.abs(a.y - b.y)\n    };\n  };\n  /** @internal */\n  Rect.fromRect = rect => {\n    return {\n      x: rect.left,\n      y: rect.top,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  };\n  /** @internal */\n  Rect.multiply = (rect, n) => {\n    return {\n      x: rect.x * n,\n      y: rect.y * n,\n      width: rect.width * n,\n      height: rect.height * n\n    };\n  };\n  /** @internal */\n  Rect.divide = (rect, n) => {\n    return Rect.multiply(rect, 1 / n);\n  };\n  /** @internal */\n  Rect.offset = (rect, delta) => {\n    const xOffset = typeof delta.x === \"number\" ? delta.x : 0;\n    const yOffset = typeof delta.y === \"number\" ? delta.y : 0;\n    return {\n      ...rect,\n      x: rect.x + xOffset,\n      y: rect.y + yOffset\n    };\n  };\n  /** @internal */\n  function inflate(rect, value) {\n    if (value === 0) return rect;\n    const doubleValue = 2 * value;\n    return {\n      x: rect.x - value,\n      y: rect.y - value,\n      width: rect.width + doubleValue,\n      height: rect.height + doubleValue\n    };\n  }\n  Rect.inflate = inflate;\n  /** @internal */\n  Rect.pixelAligned = rect => {\n    const x = Math.round(rect.x);\n    const y = Math.round(rect.y);\n    const rectMaxX = Math.round(rect.x + rect.width);\n    const rectMaxY = Math.round(rect.y + rect.height);\n    const width = Math.max(rectMaxX - x, 0);\n    const height = Math.max(rectMaxY - y, 0);\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  };\n  /** @internal */\n  Rect.halfPixelAligned = rect => {\n    const x = Math.round(rect.x * 2) / 2;\n    const y = Math.round(rect.y * 2) / 2;\n    const rectMaxX = Math.round((rect.x + rect.width) * 2) / 2;\n    const rectMaxY = Math.round((rect.y + rect.height) * 2) / 2;\n    const width = Math.max(rectMaxX - x, 1);\n    const height = Math.max(rectMaxY - y, 1);\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  };\n  /** @internal */\n  Rect.round = (rect, decimals = 0) => {\n    const x = roundedNumber(rect.x, decimals);\n    const y = roundedNumber(rect.y, decimals);\n    const width = roundedNumber(rect.width, decimals);\n    const height = roundedNumber(rect.height, decimals);\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  };\n  /** @internal */\n  Rect.roundToOutside = rect => {\n    const x = Math.floor(rect.x);\n    const y = Math.floor(rect.y);\n    const rectMaxX = Math.ceil(rect.x + rect.width);\n    const rectMaxY = Math.ceil(rect.y + rect.height);\n    const width = Math.max(rectMaxX - x, 0);\n    const height = Math.max(rectMaxY - y, 0);\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  };\n  /**\n   * @param rect -\n   * @internal\n   */\n  Rect.minX = rect => {\n    return rect.x;\n  };\n  /**\n   * @param rect -\n   * @internal\n   */\n  Rect.maxX = rect => {\n    return rect.x + rect.width;\n  };\n  /**\n   * @param rect -\n   * @internal\n   */\n  Rect.minY = rect => {\n    return rect.y;\n  };\n  /**\n   * @param rect -\n   * @internal\n   */\n  Rect.maxY = rect => {\n    return rect.y + rect.height;\n  };\n  /** @internal */\n  Rect.positions = rect => {\n    return {\n      minX: rect.x,\n      midX: rect.x + rect.width / 2,\n      maxX: Rect.maxX(rect),\n      minY: rect.y,\n      midY: rect.y + rect.height / 2,\n      maxY: Rect.maxY(rect)\n    };\n  };\n  /**\n   *\n   * @param rect -\n   * @internal\n   */\n  Rect.center = rect => {\n    return {\n      x: rect.x + rect.width / 2,\n      y: rect.y + rect.height / 2\n    };\n  };\n  /** @internal */\n  Rect.fromPoints = ps => {\n    const xValues = ps.map(point => point.x);\n    const yValues = ps.map(point => point.y);\n    const x = Math.min(...xValues);\n    const y = Math.min(...yValues);\n    const width = Math.max(...xValues) - x;\n    const height = Math.max(...yValues) - y;\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  };\n  /**\n   * Returns a rect containing all input rects\n   * @param rect - a list of rectangles\n   * @returns A rectangle that fits exactly around the input rects\n   * @internal\n   */\n  Rect.merge = (...rect) => {\n    const min = {\n      x: Math.min(...rect.map(Rect.minX)),\n      y: Math.min(...rect.map(Rect.minY))\n    };\n    const max = {\n      x: Math.max(...rect.map(Rect.maxX)),\n      y: Math.max(...rect.map(Rect.maxY))\n    };\n    return Rect.fromTwoPoints(min, max);\n  };\n  /** @internal */\n  Rect.intersection = (rect1, rect2) => {\n    const x = Math.max(rect1.x, rect2.x);\n    const x2 = Math.min(rect1.x + rect1.width, rect2.x + rect2.width);\n    const y = Math.max(rect1.y, rect2.y);\n    const y2 = Math.min(rect1.y + rect1.height, rect2.y + rect2.height);\n    return {\n      x,\n      y,\n      width: x2 - x,\n      height: y2 - y\n    };\n  };\n  /**\n   * Returns all the corner points for a rect\n   * @param rect -\n   * @internal\n   */\n  Rect.points = rect => {\n    return [{\n      x: Rect.minX(rect),\n      y: Rect.minY(rect)\n    }, {\n      x: Rect.minX(rect),\n      y: Rect.maxY(rect)\n    }, {\n      x: Rect.maxX(rect),\n      y: Rect.minY(rect)\n    }, {\n      x: Rect.maxX(rect),\n      y: Rect.maxY(rect)\n    }];\n  };\n  /** Takes a rect and transforms it by a matrix, resulting in the bounding rectangle of the\n   * rotated and/or translated original.\n   * @param rect - rectangle to transform\n   * @param matrix - matrix to transform by\n   * @returns The bounding rectangle of the rotated and/or translated rect.\n   */\n  Rect.transform = (rect, matrix) => {\n    const {\n      x: x1,\n      y: y1\n    } = matrix.transformPoint({\n      x: rect.x,\n      y: rect.y\n    });\n    const {\n      x: x2,\n      y: y2\n    } = matrix.transformPoint({\n      x: rect.x + rect.width,\n      y: rect.y\n    });\n    const {\n      x: x3,\n      y: y3\n    } = matrix.transformPoint({\n      x: rect.x + rect.width,\n      y: rect.y + rect.height\n    });\n    const {\n      x: x4,\n      y: y4\n    } = matrix.transformPoint({\n      x: rect.x,\n      y: rect.y + rect.height\n    });\n    const x = Math.min(x1, x2, x3, x4);\n    const width = Math.max(x1, x2, x3, x4) - x;\n    const y = Math.min(y1, y2, y3, y4);\n    const height = Math.max(y1, y2, y3, y4) - y;\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  };\n  /**\n   * Checks if a rectangle contains a point\n   * @param rect - The rectangle to check\n   * @param point - The point to check\n   * @returns true if the provided rectangle contains the provided point\n   * @internal\n   */\n  Rect.containsPoint = (rect, point) => {\n    if (point.x < Rect.minX(rect)) {\n      return false;\n    }\n    if (point.x > Rect.maxX(rect)) {\n      return false;\n    }\n    if (point.y < Rect.minY(rect)) {\n      return false;\n    }\n    if (point.y > Rect.maxY(rect)) {\n      return false;\n    }\n    if (isNaN(rect.x)) {\n      return false;\n    }\n    if (isNaN(rect.y)) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Returns wether a rect contains another rect entirely\n   * @param rectA -\n   * @param rectB -\n   * @returns true if rectA contains rectB\n   */\n  Rect.containsRect = (rectA, rectB) => {\n    for (const point of Rect.points(rectB)) {\n      if (!Rect.containsPoint(rectA, point)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  /** @internal */\n  Rect.toCSS = rect => {\n    return {\n      display: \"block\",\n      transform: `translate(${rect.x}px, ${rect.y}px)`,\n      width: `${rect.width}px`,\n      height: `${rect.height}px`\n    };\n  };\n  /** @internal */\n  Rect.inset = (rect, n) => {\n    return {\n      x: rect.x + n,\n      y: rect.y + n,\n      width: Math.max(0, rect.width - 2 * n),\n      height: Math.max(0, rect.height - 2 * n)\n    };\n  };\n  /** @internal */\n  Rect.intersects = (rectA, rectB) => {\n    return !(rectB.x >= Rect.maxX(rectA) || Rect.maxX(rectB) <= rectA.x || rectB.y >= Rect.maxY(rectA) || Rect.maxY(rectB) <= rectA.y);\n  };\n  /** @internal */\n  Rect.overlapHorizontally = (rectA, rectB) => {\n    const aMax = Rect.maxX(rectA);\n    const bMax = Rect.maxX(rectB);\n    return aMax > rectB.x && bMax > rectA.x;\n  };\n  /** @internal */\n  Rect.overlapVertically = (rectA, rectB) => {\n    const aMax = Rect.maxY(rectA);\n    const bMax = Rect.maxY(rectB);\n    return aMax > rectB.y && bMax > rectA.y;\n  };\n  /** @internal */\n  Rect.doesNotIntersect = (rect, rects) => {\n    return rects.find(comparingRect => {\n      return Rect.intersects(comparingRect, rect);\n    }) === undefined;\n  };\n  /**\n   *\n   * @param rectA -\n   * @param rectB -\n   * @returns if the input rectangles are equal in size and position\n   * @public\n   */\n  Rect.isEqual = (rectA, rectB) => {\n    if (rectA && rectB) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = rectA;\n      return rectB.x === x && rectB.y === y && rectB.width === width && rectB.height === height;\n    } else {\n      return rectA === rectB;\n    }\n  };\n  /** @internal */\n  Rect.cornerPoints = rect => {\n    const rectMinX = rect.x;\n    const rectMaxX = rect.x + rect.width;\n    const rectMinY = rect.y;\n    const rectMaxY = rect.y + rect.height;\n    const corner1 = {\n      x: rectMinX,\n      y: rectMinY\n    };\n    const corner2 = {\n      x: rectMaxX,\n      y: rectMinY\n    };\n    const corner3 = {\n      x: rectMaxX,\n      y: rectMaxY\n    };\n    const corner4 = {\n      x: rectMinX,\n      y: rectMaxY\n    };\n    return [corner1, corner2, corner3, corner4];\n  };\n  /** @internal */\n  Rect.midPoints = rect => {\n    const rectMinX = rect.x;\n    const rectMidX = rect.x + rect.width / 2;\n    const rectMaxX = rect.x + rect.width;\n    const rectMinY = rect.y;\n    const rectMidY = rect.y + rect.height / 2;\n    const rectMaxY = rect.y + rect.height;\n    const top = {\n      x: rectMidX,\n      y: rectMinY\n    };\n    const right = {\n      x: rectMaxX,\n      y: rectMidY\n    };\n    const bottom = {\n      x: rectMidX,\n      y: rectMaxY\n    };\n    const left = {\n      x: rectMinX,\n      y: rectMidY\n    };\n    return [top, right, bottom, left];\n  };\n  /** @internal */\n  Rect.pointDistance = (rect, point) => {\n    let x = 0;\n    let y = 0;\n    if (point.x < rect.x) {\n      x = rect.x - point.x;\n    } else if (point.x > Rect.maxX(rect)) {\n      x = point.x - Rect.maxX(rect);\n    }\n    if (point.y < rect.y) {\n      y = rect.y - point.y;\n    } else if (point.y > Rect.maxY(rect)) {\n      y = point.y - Rect.maxY(rect);\n    }\n    return Point.distance({\n      x,\n      y\n    }, {\n      x: 0,\n      y: 0\n    });\n  };\n  const fromAnyDefaults = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  };\n  /** @internal */\n  Rect.fromAny = (rect, defaults = fromAnyDefaults) => {\n    return {\n      x: rect.x || defaults.x,\n      y: rect.y || defaults.y,\n      width: rect.width || defaults.width,\n      height: rect.height || defaults.height\n    };\n  };\n  /** @internal */\n  Rect.withMinSize = (rect, minSize) => {\n    const {\n      width: minWidth,\n      height: minHeight\n    } = minSize;\n    const diffX = rect.width - minWidth;\n    const diffY = rect.height - minHeight;\n    return {\n      width: Math.max(rect.width, minWidth),\n      height: Math.max(rect.height, minHeight),\n      x: rect.width < minWidth ? rect.x + diffX / 2 : rect.x,\n      y: rect.height < minHeight ? rect.y + diffY / 2 : rect.y\n    };\n  };\n})(Rect || (Rect = {}));","map":{"version":3,"names":["roundedNumber","Point","Rect","equals","rect","other","x","y","width","height","atOrigin","size","fromTwoPoints","a","b","Math","min","abs","fromRect","left","top","right","bottom","multiply","n","divide","offset","delta","xOffset","yOffset","inflate","value","doubleValue","pixelAligned","round","rectMaxX","rectMaxY","max","halfPixelAligned","decimals","roundToOutside","floor","ceil","minX","maxX","minY","maxY","positions","midX","midY","center","fromPoints","ps","xValues","map","point","yValues","merge","intersection","rect1","rect2","x2","y2","points","transform","matrix","x1","y1","transformPoint","x3","y3","x4","y4","containsPoint","isNaN","containsRect","rectA","rectB","toCSS","display","inset","intersects","overlapHorizontally","aMax","bMax","overlapVertically","doesNotIntersect","rects","find","comparingRect","undefined","isEqual","cornerPoints","rectMinX","rectMinY","corner1","corner2","corner3","corner4","midPoints","rectMidX","rectMidY","pointDistance","distance","fromAnyDefaults","fromAny","defaults","withMinSize","minSize","minWidth","minHeight","diffX","diffY"],"sources":["../../../src/render/types/Rect.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}