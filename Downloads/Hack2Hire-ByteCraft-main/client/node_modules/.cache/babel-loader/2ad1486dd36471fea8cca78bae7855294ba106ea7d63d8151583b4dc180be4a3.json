{"ast":null,"code":"import process from \"process\";\nimport { assert } from \"../../utils/assert.js\";\nimport { runtime } from \"../../utils/runtimeInjection.js\";\nimport { warnOnce } from \"../../utils/warnOnce.js\";\nimport { customFontSelectorPrefix, CustomFontSource } from \"./CustomFontSource.js\";\nimport { fontsharePrefix, FontshareSource } from \"./FontshareSource.js\";\nimport { googleFontSelectorPrefix, GoogleFontSource } from \"./GoogleFontSource.js\";\nimport { isFontReady, loadFont } from \"./loadFont.js\";\nimport { LocalFontSource } from \"./LocalFontSource.js\";\nimport { TypefaceSourceNames } from \"./types.js\";\n/**\n * Used to differentiate between requests that are immediately fulfilled,\n * because the font was already loaded, and those that resulted in a newly\n * loaded font\n *\n * @internal\n */\nexport var LoadFontResult;\n(function (LoadFontResult) {\n  LoadFontResult[LoadFontResult[\"AlreadyLoaded\"] = 0] = \"AlreadyLoaded\";\n  LoadFontResult[LoadFontResult[\"Loaded\"] = 1] = \"Loaded\";\n})(LoadFontResult || (LoadFontResult = {}));\n/**\n * Stores all available fonts, whether they are currently loaded or not\n * Provides APIs to import, add and resolve fonts and font selectors\n * Model:\n * `FontStore` (single instance available via `fontStore`)\n *   `FontSource` (local/google)\n *     `Typeface` (font family and its variants)\n *       `Font` (font family with a specific variant)\n * Every `Font` has a `selector` (string), which is a unique identifier of a font\n * Google web fonts provide consistent naming for fonts,\n * so it's also possible to `parseFontSelector()` and get some info about a web font from only its selector\n *\n * @internal\n */\nexport class FontStore {\n  /**\n   * Enabling the `FontStore` will make Text components automatically load\n   * their fonts on render. Otherwise font loading is the responsibility of\n   * the environment.\n   */\n  enabled = false;\n  bySelector = new Map();\n  getGoogleFontsListPromise;\n  getFontshareFontsListPromise;\n  loadedSelectors = new Set();\n  googleFamilyNames = new Set();\n  defaultFont;\n  constructor() {\n    this.local = new LocalFontSource();\n    this.google = new GoogleFontSource();\n    this.fontshare = new FontshareSource();\n    this.custom = new CustomFontSource();\n    this.bySelector = new Map();\n    this.importLocalFonts();\n    const defaultFont = this.getFontBySelector(\"Inter\");\n    assert(defaultFont, \"Can’t find Inter font\");\n    this.defaultFont = defaultFont;\n  }\n  local;\n  google;\n  fontshare;\n  custom;\n  addFont(font) {\n    this.bySelector.set(font.selector, font);\n  }\n  getAvailableFonts() {\n    return Array.from(this.bySelector.values());\n  }\n  importLocalFonts() {\n    this.local.importFonts().forEach(font => {\n      this.addFont(font);\n      // Immediately “load” fonts (as they require no real loading, except Inter)\n      if (!this.local.interTypefaceSelectors.has(font.selector)) {\n        this.loadFont(font);\n      }\n    });\n  }\n  async importGoogleFonts() {\n    if (!this.getGoogleFontsListPromise) {\n      this.getGoogleFontsListPromise = runtime.fetchGoogleFontsList();\n      const googleFonts = await this.getGoogleFontsListPromise;\n      this.google.importFonts(googleFonts).forEach(font => {\n        this.googleFamilyNames.add(font.typeface.family.toLowerCase());\n        this.addFont(font);\n      });\n    }\n    return this.getGoogleFontsListPromise;\n  }\n  async importFontshareFonts() {\n    if (!this.getFontshareFontsListPromise) {\n      this.getFontshareFontsListPromise = runtime.fetchFontshareFontsList();\n      const fontshareFonts = await this.getFontshareFontsListPromise;\n      this.fontshare.importFonts(fontshareFonts).forEach(font => {\n        if (!this.googleFamilyNames.has(font.typeface.family.toLowerCase())) {\n          this.addFont(font);\n        }\n      });\n    }\n    return this.getFontshareFontsListPromise;\n  }\n  importCustomFonts(assets) {\n    // Clear custom fonts from the list as they might have been deleted from assets\n    this.bySelector.forEach((_, key) => {\n      if (key.startsWith(customFontSelectorPrefix)) {\n        this.bySelector.delete(key);\n      }\n    });\n    this.custom.importFonts(assets).forEach(font => this.addFont(font));\n  }\n  getTypeface(info) {\n    const typeface = this[info.source].getTypefaceByFamily(info.family);\n    return typeface;\n  }\n  getFontBySelector(selector, createFont = true) {\n    if (selector.startsWith(customFontSelectorPrefix)) {\n      return this.custom.getFontBySelector(selector, createFont);\n    }\n    return this.bySelector.get(selector);\n  }\n  // Function called by draft to get font properties for a selector, before the (google) font is available in the store\n  // It replaces a previous function that created Font instances and added them to the store\n  // on the fly while rendering drafts, which caused issues (overriding real google font info with fake instances with partial data).\n  // Ideally this should not happen, but that's a fix for another day\n  getDraftPropertiesBySelector(selector) {\n    const font = this.getFontBySelector(selector);\n    if (font) {\n      return {\n        style: font.style,\n        weight: font.weight,\n        variant: font.variant,\n        family: font.typeface.family,\n        source: font.typeface.source,\n        category: font.category\n      };\n    }\n    // If this is an unknown selector, attempt to parse it as a google font selector\n    const googleLocator = this.google.parseSelector(selector);\n    if (googleLocator) {\n      const fontVariant = GoogleFontSource.parseVariant(googleLocator.variant);\n      if (fontVariant) {\n        return {\n          style: fontVariant.style,\n          weight: fontVariant.weight,\n          variant: googleLocator.variant,\n          family: googleLocator.family,\n          source: TypefaceSourceNames.Google,\n          category: undefined\n        };\n      }\n    }\n    const fontshareLocator = this.fontshare.parseSelector(selector);\n    if (fontshareLocator) {\n      const fontVariant = FontshareSource.parseVariant(fontshareLocator.variant);\n      if (fontVariant) {\n        return {\n          style: fontVariant.style,\n          weight: fontVariant.weight,\n          variant: fontshareLocator.variant,\n          family: fontshareLocator.family,\n          source: TypefaceSourceNames.Fontshare,\n          category: undefined\n        };\n      }\n    }\n    return null;\n  }\n  isSelectorLoaded(selector) {\n    return this.loadedSelectors.has(selector);\n  }\n  /**\n   * Load a single font\n   * */\n  async loadFont(font) {\n    if (this.isSelectorLoaded(font.selector)) {\n      return LoadFontResult.AlreadyLoaded;\n    }\n    if (font.typeface.source === TypefaceSourceNames.Local) {\n      // In case of a local font, we can safely assume it's loaded, except for\n      // the Inter font, which is loaded via an external CSS file. Loading will be\n      // initiated automatically by the browser, we only need to wait until it's ready.\n      // NOTE: Skip for tests and assume Inter is loaded.\n      if (this.local.interTypefaceSelectors.has(font.selector) && process.env.NODE_ENV !== \"test\") {\n        await isFontReady(font.typeface.family, font.style, font.weight);\n      }\n      this.loadedSelectors.add(font.selector);\n      return LoadFontResult.Loaded;\n    }\n    // Load custom or Google font\n    if (!font.file) {\n      return Promise.reject(`Unable to load font: ${font.selector}`);\n    }\n    await loadFont({\n      family: font.typeface.family,\n      url: font.file,\n      weight: font.weight,\n      style: font.style\n    }, document);\n    this.loadedSelectors.add(font.selector);\n    return LoadFontResult.Loaded;\n  }\n  async loadWebFontsFromSelectors(selectors) {\n    if (!this.enabled) return [];\n    const loadFontshareFonts = selectors.some(selector => selector.startsWith(fontsharePrefix));\n    // In case we are loading a Google font, make sure the list of\n    // Google fonts has been imported in the store\n    if (selectors.some(s => s.startsWith(googleFontSelectorPrefix)) || loadFontshareFonts) {\n      try {\n        await this.importGoogleFonts();\n      } catch (error) {\n        warnOnce(\"Failed to load Google fonts:\", error);\n      }\n      // Fontshare include typefaces that already exist in Google Fonts.\n      // To avoid duplication, we need to **always** load Google Fonts\n      // first, which will populate `this.googleFamilyNames`, and then\n      // check if a typeface already exists when importing Fontshare\n      // fonts.\n      //\n      // TODO: Perform this deduplication in FramerWebAPI because it's\n      // making an extra request to Google Fonts even if the site only\n      // uses Fontshare typefaces. This is only an issue in the editor,\n      // and does not affect published sites.\n      //\n      // https://github.com/framer/company/issues/27752\n      try {\n        await this.importFontshareFonts();\n      } catch (error) {\n        warnOnce(\"Failed to load Fontshare fonts:\", error);\n      }\n    }\n    // Filter out all unknown fonts. This means that not every selector\n    // that was requested might be loaded!\n    const fonts = selectors.map(s => this.bySelector.get(s)).filter(f => !!f);\n    // Trigger the loading of all fonts. We’re using `allSettled` here\n    // (polyfilled below) to make sure as many as possible are loaded. Fonts\n    // that have failed before will immediately reject.\n    return Promise.allSettled(fonts.map(f => this.loadFont(f)));\n  }\n  async loadMissingFonts(fontSelectors, fontsLoadedCallback) {\n    const selectors = fontSelectors.filter(selector => {\n      return !fontStore.isSelectorLoaded(selector);\n    });\n    if (selectors.length === 0) return;\n    await fontStore.loadWebFontsFromSelectors(selectors);\n    const isEachFontLoaded = selectors.every(selector => {\n      return fontStore.isSelectorLoaded(selector);\n    });\n    if (isEachFontLoaded && fontsLoadedCallback) fontsLoadedCallback();\n  }\n}\n/** @internal */\nexport const fontStore = /* @__PURE__ */new FontStore();\n/** Promise.allSettled polyfill */\nPromise.allSettled = Promise.allSettled || (promises => Promise.all(promises.map(p => p.then(v => ({\n  status: \"fulfilled\",\n  value: v\n})).catch(e => ({\n  status: \"rejected\",\n  reason: e\n})))));","map":{"version":3,"names":["process","assert","runtime","warnOnce","customFontSelectorPrefix","CustomFontSource","fontsharePrefix","FontshareSource","googleFontSelectorPrefix","GoogleFontSource","isFontReady","loadFont","LocalFontSource","TypefaceSourceNames","LoadFontResult","FontStore","enabled","bySelector","Map","getGoogleFontsListPromise","getFontshareFontsListPromise","loadedSelectors","Set","googleFamilyNames","defaultFont","constructor","local","google","fontshare","custom","importLocalFonts","getFontBySelector","addFont","font","set","selector","getAvailableFonts","Array","from","values","importFonts","forEach","interTypefaceSelectors","has","importGoogleFonts","fetchGoogleFontsList","googleFonts","add","typeface","family","toLowerCase","importFontshareFonts","fetchFontshareFontsList","fontshareFonts","importCustomFonts","assets","_","key","startsWith","delete","getTypeface","info","source","getTypefaceByFamily","createFont","get","getDraftPropertiesBySelector","style","weight","variant","category","googleLocator","parseSelector","fontVariant","parseVariant","Google","undefined","fontshareLocator","Fontshare","isSelectorLoaded","AlreadyLoaded","Local","env","NODE_ENV","Loaded","file","Promise","reject","url","document","loadWebFontsFromSelectors","selectors","loadFontshareFonts","some","s","error","fonts","map","filter","f","allSettled","loadMissingFonts","fontSelectors","fontsLoadedCallback","fontStore","length","isEachFontLoaded","every","promises","all","p","then","v","status","value","catch","e","reason"],"sources":["../../../src/render/fonts/fontStore.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}