{"ast":null,"code":"import { useContext } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"../../useIsomorphicLayoutEffect.js\";\nimport { runtime } from \"../../utils/runtimeInjection.js\";\nimport { ComponentContainerContext } from \"../presentation/ComponentContainerContext.js\";\nimport { RenderTarget } from \"../types/RenderEnvironment.js\";\nimport { getMeasurableCodeComponentChildren } from \"./getMeasurableCodeComponentChildren.js\";\nimport { nodeIdFromString } from \"./nodeIdFromString.js\";\n/**\n * Adds the element and its children to the layout measure queue\n *\n * @internal\n */\nexport function useMeasureLayout(props, ref, getChildren = () => [], options = {}) {\n  const {\n    id,\n    visible,\n    _needsMeasure\n  } = props;\n  const {\n    skipHook = false\n  } = options;\n  const inCodeComponent = Boolean(useContext(ComponentContainerContext));\n  const onCanvas = RenderTarget.current() === RenderTarget.canvas;\n  useIsomorphicLayoutEffect(() => {\n    // must be on the canvas, not in a code component, and must not be\n    // explicitly skipped through skipHook\n    if (!onCanvas || inCodeComponent || skipHook) {\n      return;\n    }\n    // must have a valid ref, id, be visible and need measure\n    if (!(ref.current && id && visible && _needsMeasure)) {\n      return;\n    }\n    runtime.queueMeasureRequest(nodeIdFromString(id), ref.current, getChildren(ref.current));\n  });\n}\n/**\n * Attempts to find the closest component container ancestor to a reference\n * element, and add a layout measure request for it. Used when an element inside\n * a code component has caused a layout shift outside of the normal render loop\n * (such as when fonts load), and needs to trigger a re-measure of its container.\n *\n * @param element\n * @internal\n */\nexport function measureClosestComponentContainer(element) {\n  const container = element.closest(\"[data-framer-component-container]\");\n  if (!container) return;\n  runtime.queueMeasureRequest(nodeIdFromString(container.id), container, getMeasurableCodeComponentChildren(container));\n}","map":{"version":3,"names":["useContext","useIsomorphicLayoutEffect","runtime","ComponentContainerContext","RenderTarget","getMeasurableCodeComponentChildren","nodeIdFromString","useMeasureLayout","props","ref","getChildren","options","id","visible","_needsMeasure","skipHook","inCodeComponent","Boolean","onCanvas","current","canvas","queueMeasureRequest","measureClosestComponentContainer","element","container","closest"],"sources":["../../../src/render/utils/useMeasureLayout.ts"],"sourcesContent":[null],"mappings":"AAAA,SAAoBA,UAAU,QAAQ,OAAO;AAE7C,SAASC,yBAAyB,QAAQ,oCAAoC;AAC9E,SAASC,OAAO,QAAQ,iCAAiC;AACzD,SAASC,yBAAyB,QAAQ,8CAA8C;AACxF,SAASC,YAAY,QAAQ,+BAA+B;AAC5D,SAASC,kCAAkC,QAAQ,yCAAyC;AAC5F,SAASC,gBAAgB,QAAQ,uBAAuB;AAQxD;;;;;AAKA,OAAM,SAAUC,gBAAgBA,CAC5BC,KAAkE,EAClEC,GAA8B,EAC9BC,WAAA,GAA6BA,CAAA,KAAM,EAAE,EACrCC,OAAA,GAAkC,EAAE;EAEpC,MAAM;IAAEC,EAAE;IAAEC,OAAO;IAAEC;EAAa,CAAE,GAAGN,KAAK;EAC5C,MAAM;IAAEO,QAAQ,GAAG;EAAK,CAAE,GAAGJ,OAAO;EACpC,MAAMK,eAAe,GAAGC,OAAO,CAACjB,UAAU,CAACG,yBAAyB,CAAC,CAAC;EACtE,MAAMe,QAAQ,GAAGd,YAAY,CAACe,OAAO,EAAE,KAAKf,YAAY,CAACgB,MAAM;EAE/DnB,yBAAyB,CAAC,MAAK;IAC3B;IACA;IACA,IAAI,CAACiB,QAAQ,IAAIF,eAAe,IAAID,QAAQ,EAAE;MAC1C;;IAGJ;IACA,IAAI,EAAEN,GAAG,CAACU,OAAO,IAAIP,EAAE,IAAIC,OAAO,IAAIC,aAAa,CAAC,EAAE;MAClD;;IAGJZ,OAAO,CAACmB,mBAAmB,CAACf,gBAAgB,CAACM,EAAE,CAAC,EAAEH,GAAG,CAACU,OAAO,EAAET,WAAW,CAACD,GAAG,CAACU,OAAO,CAAC,CAAC;EAC5F,CAAC,CAAC;AACN;AAEA;;;;;;;;;AASA,OAAM,SAAUG,gCAAgCA,CAACC,OAAgB;EAC7D,MAAMC,SAAS,GAAGD,OAAO,CAACE,OAAO,CAAC,mCAAmC,CAAC;EACtE,IAAI,CAACD,SAAS,EAAE;EAEhBtB,OAAO,CAACmB,mBAAmB,CACvBf,gBAAgB,CAACkB,SAAS,CAACZ,EAAE,CAAC,EAC9BY,SAAS,EACTnB,kCAAkC,CAACmB,SAAS,CAAC,CAChD;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}