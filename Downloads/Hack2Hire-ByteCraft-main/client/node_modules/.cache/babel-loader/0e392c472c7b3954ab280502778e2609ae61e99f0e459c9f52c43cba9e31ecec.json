{"ast":null,"code":"/**\n * The `RenderTarget` represents the current environment in which a component\n * is running. This is most commonly either the editor canvas in Framer or in\n * the generated preview window.\n *\n * @remarks\n * Code components can use the `RenderTarget.current()` method to check for\n * the environment within their components and vary rendering accordingly. The\n * most common case would be to improve performance while rendering in the\n * Framer canvas where components that take too long to render will be replaced\n * with a placeholder. The `RenderTarget.hasRestrictions()` method can be used\n * to check explicitly for this case.\n *\n * @public\n */\nexport var RenderTarget;\n(function (RenderTarget) {\n  /**\n   * The component is to be rendered for the Framer canvas.\n   *\n   * @remarks\n   * ```jsx\n   * function App() {\n   *   if (RenderTarget.current() === RenderTarget.canvas) {\n   *     return <CanvasComponent />\n   *   }\n   *   return <DefaultComponent />\n   * }\n   * ```\n   */\n  RenderTarget[\"canvas\"] = \"CANVAS\";\n  /**\n   * The component is to be rendered for export.\n   *\n   * @remarks\n   * ```jsx\n   * function App() {\n   *   if (RenderTarget.current() === RenderTarget.export) {\n   *     return <ExportComponent />\n   *   }\n   *   return <DefaultComponent />\n   * }\n   * ```\n   */\n  RenderTarget[\"export\"] = \"EXPORT\";\n  /**\n   * The component is to be rendered as a preview thumbnail, for example in the\n   * component panel.\n   *\n   * @remarks\n   * ```jsx\n   * function App() {\n   *   if (RenderTarget.current() === RenderTarget.thumbnail) {\n   *     return <Thumbnail />\n   *   }\n   *   return <DefaultComponent />\n   * }\n   * ```\n   */\n  RenderTarget[\"thumbnail\"] = \"THUMBNAIL\";\n  /**\n   * The component is being rendered in the preview window.\n   *\n   * @remarks\n   * ```jsx\n   * function App() {\n   *   React.useEffect(() => {\n   *     if (RenderTarget.current() === RenderTarget.preview) {\n   *       // Do something in preview.\n   *     }\n   *   })\n   *   return <DefaultComponent />\n   * }\n   * ```\n   */\n  RenderTarget[\"preview\"] = \"PREVIEW\";\n})(RenderTarget || (RenderTarget = {}));\n/**\n * @internal\n */\nexport const RenderEnvironment = {\n  imageBaseURL: \"\",\n  target: RenderTarget.preview,\n  zoom: 1\n};\n/**\n * This is used to temporarily execute a task in a different render environment (for example during export)\n * @internal\n */\nexport function executeInRenderEnvironment(customEnvironment, task) {\n  // Copy currentEnvironment\n  const previousEnvironment = Object.assign({}, RenderEnvironment);\n  // Set the customEnvironment to the current environment\n  Object.assign(RenderEnvironment, customEnvironment);\n  const result = task();\n  // Reset the previous environment back on the currentEnvironment\n  Object.assign(RenderEnvironment, previousEnvironment);\n  return result;\n}\n/**\n * This function sets the global render environment Framer Core uses to render.\n * Because it sets global state, there should be only one thing responsable for calling it in every react app (e.g. Vekter and Preview)\n * @internal\n */\nexport function setGlobalRenderEnvironment(environment) {\n  Object.assign(RenderEnvironment, environment);\n}\n/**\n * @internal\n */\nexport function useRenderEnvironment(target, imageBaseURL, zoom) {\n  let willChangeElements = false;\n  if (RenderEnvironment.imageBaseURL !== imageBaseURL) {\n    RenderEnvironment.imageBaseURL = imageBaseURL;\n    willChangeElements = true;\n  }\n  if (RenderEnvironment.target !== target) {\n    RenderEnvironment.target = target;\n    willChangeElements = true;\n  }\n  if (RenderEnvironment.zoom !== zoom) {\n    RenderEnvironment.zoom = zoom;\n  }\n  return {\n    willChangeElements\n  };\n}\n/**\n * @privateRemarks\n * This is a read-only equivalent of RenderEnvironment.target that is exposed\n * to components for context-dependent rendering\n * @public\n */\n(function (RenderTarget) {\n  /**\n   * Returns the current `RenderTarget` allowing components to apply\n   * different behaviors depending on the environment.\n   *\n   * @remarks\n   * ```jsx\n   * function App() {\n   *   if (RenderTarget.current() === RenderTarget.thumbnail) {\n   *     return <PreviewIcon />\n   *   }\n   *   return <Frame>...</Frame>\n   * }\n   * ```\n   */\n  function current() {\n    return RenderEnvironment.target;\n  }\n  RenderTarget.current = current;\n  /**\n   * Returns true if the current `RenderTarget` has performance restrictions.\n   * Use this to avoid doing heavy work in these contexts because they may\n   * bail on the rendering if the component takes too long.\n   *\n   * @remarks\n   * ```jsx\n   * function App() {\n   *   if (RenderTarget.hasRestrictions()) {\n   *     return <SomePlaceholder />\n   *   }\n   *   return <RichPreviewContent />\n   * }\n   * ```\n   */\n  function hasRestrictions() {\n    const target = RenderEnvironment.target;\n    if (target === RenderTarget.canvas) return true;\n    if (target === RenderTarget.export) return true;\n    return false;\n  }\n  RenderTarget.hasRestrictions = hasRestrictions;\n})(RenderTarget || (RenderTarget = {}));","map":{"version":3,"names":["RenderTarget","RenderEnvironment","imageBaseURL","target","preview","zoom","executeInRenderEnvironment","customEnvironment","task","previousEnvironment","Object","assign","result","setGlobalRenderEnvironment","environment","useRenderEnvironment","willChangeElements","current","hasRestrictions","canvas","export"],"sources":["../../../src/render/types/RenderEnvironment.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,WAAYA,YA4DX;AA5DD,WAAYA,YAAY;EACpB;;;;;;;;;;;;;EAaAA,YAAA,qBAAiB;EACjB;;;;;;;;;;;;;EAaAA,YAAA,qBAAiB;EACjB;;;;;;;;;;;;;;EAcAA,YAAA,2BAAuB;EACvB;;;;;;;;;;;;;;;EAeAA,YAAA,uBAAmB;AACvB,CAAC,EA5DWA,YAAY,KAAZA,YAAY;AAuExB;;;AAGA,OAAO,MAAMC,iBAAiB,GAAsB;EAChDC,YAAY,EAAE,EAAE;EAChBC,MAAM,EAAEH,YAAY,CAACI,OAAO;EAC5BC,IAAI,EAAE;CACT;AAED;;;;AAIA,OAAM,SAAUC,0BAA0BA,CAAIC,iBAA6C,EAAEC,IAAa;EACtG;EACA,MAAMC,mBAAmB,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEV,iBAAiB,CAAC;EAChE;EACAS,MAAM,CAACC,MAAM,CAACV,iBAAiB,EAAEM,iBAAiB,CAAC;EACnD,MAAMK,MAAM,GAAGJ,IAAI,EAAE;EACrB;EACAE,MAAM,CAACC,MAAM,CAACV,iBAAiB,EAAEQ,mBAAmB,CAAC;EACrD,OAAOG,MAAM;AACjB;AAEA;;;;;AAKA,OAAM,SAAUC,0BAA0BA,CAACC,WAAuC;EAC9EJ,MAAM,CAACC,MAAM,CAACV,iBAAiB,EAAEa,WAAW,CAAC;AACjD;AAEA;;;AAGA,OAAM,SAAUC,oBAAoBA,CAACZ,MAAoB,EAAED,YAAoB,EAAEG,IAAY;EACzF,IAAIW,kBAAkB,GAAG,KAAK;EAE9B,IAAIf,iBAAiB,CAACC,YAAY,KAAKA,YAAY,EAAE;IACjDD,iBAAiB,CAACC,YAAY,GAAGA,YAAY;IAC7Cc,kBAAkB,GAAG,IAAI;;EAG7B,IAAIf,iBAAiB,CAACE,MAAM,KAAKA,MAAM,EAAE;IACrCF,iBAAiB,CAACE,MAAM,GAAGA,MAAM;IACjCa,kBAAkB,GAAG,IAAI;;EAG7B,IAAIf,iBAAiB,CAACI,IAAI,KAAKA,IAAI,EAAE;IACjCJ,iBAAiB,CAACI,IAAI,GAAGA,IAAI;;EAGjC,OAAO;IAAEW;EAAkB,CAAE;AACjC;AAEA;;;;;;AAMA,WAAiBhB,YAAY;EACzB;;;;;;;;;;;;;;EAcA,SAAgBiB,OAAOA,CAAA;IACnB,OAAOhB,iBAAiB,CAACE,MAAM;EACnC;EAFgBH,YAAA,CAAAiB,OAAO,GAAAA,OAEtB;EAED;;;;;;;;;;;;;;;EAeA,SAAgBC,eAAeA,CAAA;IAC3B,MAAMf,MAAM,GAAGF,iBAAiB,CAACE,MAAM;IACvC,IAAIA,MAAM,KAAKH,YAAY,CAACmB,MAAM,EAAE,OAAO,IAAI;IAC/C,IAAIhB,MAAM,KAAKH,YAAY,CAACoB,MAAM,EAAE,OAAO,IAAI;IAC/C,OAAO,KAAK;EAChB;EALgBpB,YAAA,CAAAkB,eAAe,GAAAA,eAK9B;AACL,CAAC,EAxCgBlB,YAAY,KAAZA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}