{"ast":null,"code":"import { computeRelativePath, getRouteElementId, isRoute } from \"../router/index.js\";\nimport { isString } from \"../utils/utils.js\";\nimport { parseFramerPageLink } from \"./framerPageLink.js\";\nimport { linkFromFramerPageLink, linkMatchesRoute, pathVariablesRegExp } from \"./Link.js\";\nconst htmlRegExp = /[&<>'\"]/g;\n/**\n * Escape html characters that would result in invalid paths.\n * https://www.30secondsofcode.org/js/s/escape-html\n */\nconst escapeHTML = str => str.replace(htmlRegExp, tag => ({\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  \"'\": \"&#39;\",\n  '\"': \"&quot;\"\n})[tag] || tag);\n/** A regex that searches for html tags, and href values. */\nconst regex = /(<([a-z]+)(?:\\s+(?!href[\\s=])[^=\\s]+=(?:'[^']*'|\"[^\"]*\"))*)(?:(\\s+href\\s*=)(?:'([^']*)'|\"([^\"]*)\"))?((?:\\s+[^=\\s]+=(?:'[^']*'|\"[^\"]*\"))*>)/gi;\n/**\n * @internal @deprecated\n */\nexport function replaceFramerPageLinks(rawHTML, getRoute, currentRoute, implicitPathVariables) {\n  return rawHTML.replace(regex, (original, pre1, tag, pre2, value1, value2, post) => {\n    if (tag.toLowerCase() !== \"a\") return original;\n    const href = value1 || value2;\n    const pageLink = parseFramerPageLink(href.replace(/&amp;/g, \"&\"));\n    if (!pageLink || !pageLink.target) return original;\n    const targetRoute = getRoute(pageLink.target);\n    if (!isRoute(targetRoute) || !isRoute(currentRoute)) return original;\n    const targetPath = targetRoute.path;\n    const currentPath = currentRoute.path;\n    if (!targetPath || !currentPath) return original;\n    let attributes = ` ${\"data-framer-page-link-target\" /* PageLinkAttribute.Page */}=\"${pageLink.target}\"`;\n    const elementId = getRouteElementId(targetRoute, pageLink.element ?? undefined);\n    if (elementId) {\n      attributes += ` ${\"data-framer-page-link-element\" /* PageLinkAttribute.Element */}=\"${pageLink.element}\"`;\n    }\n    const link = linkFromFramerPageLink(href);\n    if (!link || isString(link)) return original;\n    if (linkMatchesRoute(currentRoute, link, implicitPathVariables)) {\n      attributes += ` ${\"data-framer-page-link-current\" /* PageLinkAttribute.Current */}`;\n    }\n    let relativePath = targetPath;\n    const pathVariables = Object.assign({}, implicitPathVariables, pageLink.collectionItem?.pathVariables);\n    if (Object.keys(pathVariables).length > 0) {\n      relativePath = relativePath.replace(pathVariablesRegExp, (_, key) => \"\" + pathVariables[key]);\n    }\n    if (pageLink.collectionItem?.pathVariables) {\n      // Since implicit path variables will be provided when\n      // navigating this link, we don't want to use the merged path\n      // variables.\n      const params = new URLSearchParams(pageLink.collectionItem.pathVariables);\n      attributes += ` ${\"data-framer-page-link-path-variables\" /* PageLinkAttribute.PathVariables */}=\"${params}\"`;\n    }\n    // TODO: For complete correctness, currentPath should also have its path variables filled in.\n    relativePath = computeRelativePath(currentPath, relativePath);\n    return pre1 + pre2 + `\"${escapeHTML(relativePath + (elementId ? `#${elementId}` : \"\"))}\"` + attributes + post;\n  });\n}","map":{"version":3,"names":["computeRelativePath","getRouteElementId","isRoute","isString","parseFramerPageLink","linkFromFramerPageLink","linkMatchesRoute","pathVariablesRegExp","htmlRegExp","escapeHTML","str","replace","tag","regex","replaceFramerPageLinks","rawHTML","getRoute","currentRoute","implicitPathVariables","original","pre1","pre2","value1","value2","post","toLowerCase","href","pageLink","target","targetRoute","targetPath","path","currentPath","attributes","elementId","element","undefined","link","relativePath","pathVariables","Object","assign","collectionItem","keys","length","_","key","params","URLSearchParams"],"sources":["../../src/modules/replaceFramerPageLinks.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}