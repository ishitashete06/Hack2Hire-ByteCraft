{"ast":null,"code":"import { interpolate } from \"framer-motion\";\nimport { hslToRgb, hsvToRgb, rgbaFromHusl, rgbToHex, rgbToHsl as rgbToHslConverter, rgbToHsluv, rgbToHsv, rgbToRgb, stringToObject } from \"./converters.js\";\nimport { cssNames } from \"./CSSNames.js\";\nimport { ColorFormat, ColorMixModelType } from \"./types.js\";\nimport { isNumeric, modulate, numberFromString } from \"./Utils.js\";\nconst cache = new Map();\n/**\n * The Color function can be used to define colors, either as a string value or as an object. All colors\n * are converted to a Color object with `r, g, b`, `h, s, l` and an `a` value.\n * There are also various helpers on the Color function for working with,\n * modifying and detecting colors.\n *\n * ```jsx\n * // HEX\n * const blue = Color(\"#0099FF\")\n *\n * // RGB\n * const blue = Color(\"rgb(0, 153, 255)\")\n * const blue = Color(0, 153, 255)\n * const blue = Color({r: 0, g: 153, b: 255})\n * const blue = Color({r: 0, g: 153, b: 255, a: 1})\n *\n * // HSL\n * const blue = Color(\"hsl(204, 100%, 50%)\")\n * const blue = Color({h: 204, s: 1, l: 0.5})\n * const blue = Color({h: 204, s: 1, l: 0.5, a: 1})\n * ```\n * @public\n */\nexport const Color = /* @__PURE__ */(() => {\n  /**\n   * @public\n   */\n  function Color(color, r, g, b) {\n    if (typeof color === \"string\") {\n      let c = cache.get(color);\n      if (c) return c;\n      c = createColor(color);\n      if (c === undefined) return {\n        ...Color(\"black\"),\n        isValid: false\n      };\n      cache.set(color, c); // TODO: should be frozen?\n      return c;\n    }\n    const created = createColor(color, r, g, b);\n    return created !== undefined ? created : {\n      ...Color(\"black\"),\n      isValid: false\n    };\n  }\n  function createColor(color, r, g, b) {\n    if (color === \"\") return undefined;\n    const colorData = getCompleteColorStrategy(color, r, g, b);\n    if (colorData) {\n      const newColor = {\n        r: colorData.r,\n        g: colorData.g,\n        b: colorData.b,\n        a: colorData.a,\n        h: colorData.h,\n        s: colorData.s,\n        l: colorData.l,\n        initialValue: typeof color === \"string\" && colorData.format !== ColorFormat.HSV ? color : undefined,\n        roundA: Math.round(100 * colorData.a) / 100,\n        format: colorData.format,\n        mix: Color.mix,\n        toValue: () => Color.toRgbString(newColor)\n      };\n      return newColor;\n    } else {\n      return undefined;\n    }\n  }\n  const ColorMixModel = {\n    isRGB(colorModel) {\n      return colorModel === ColorMixModelType.RGB || colorModel === ColorMixModelType.RGBA;\n    },\n    isHSL(colorModel) {\n      return colorModel === ColorMixModelType.HSL || colorModel === ColorMixModelType.HSLA;\n    }\n  };\n  /**\n   * Formats a Color object into a readable string for debugging.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.inspect(blue)\n   * ```\n   *\n   * @param color - The Color object to format\n   * @param initialValue - A canonical hex string to be used instead of an rgba() value.\n   */\n  Color.inspect = (color, initialValue) => {\n    if (color.format === ColorFormat.HSL) {\n      return `<${color.constructor.name} h:${color.h} s:${color.s} l:${color.l} a:${color.a}>`;\n    } else if (color.format === ColorFormat.HEX || color.format === ColorFormat.NAME) {\n      return `<${color.constructor.name} \"${initialValue}\">`;\n    } else {\n      return `<${color.constructor.name} r:${color.r} g:${color.g} b:${color.b} a:${color.a}>`;\n    }\n  };\n  /**\n   * Checks if the value is a valid color object or color string. Returns true or false.\n   *\n   * @remarks\n   * ```jsx\n   * Color.isColor(\"#0099FF\") // true\n   * Color.isColor(Color(\"#0099FF\")) // true\n   * ```\n   *\n   * @param color - The potential color value to validate\n   */\n  Color.isColor = color => {\n    if (typeof color === \"string\") {\n      return Color.isColorString(color);\n    } else {\n      return Color.isColorObject(color);\n    }\n  };\n  /**\n   * Checks if the value is a valid color string. Returns true or false.\n   *\n   * @remarks\n   * ```jsx\n   * Color.isColorString(\"#0099FF\") // true\n   * ```\n   *\n   * @param color - A string representing a color\n   */\n  Color.isColorString = colorString => {\n    if (typeof colorString === \"string\") {\n      return stringToObject(colorString) !== false;\n    }\n    return false;\n  };\n  /**\n   * Checks if the value is a valid Color object. Returns true or false.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.isColorObject(blue) // true\n   * Color.isColorObject(\"#0099FF\") // false\n   * ```\n   *\n   * @param color - An object representing a color.\n   */\n  Color.isColorObject = color => {\n    return color && typeof color !== \"string\" && typeof color.r === \"number\" && typeof color.g === \"number\" && typeof color.b === \"number\" && typeof color.h === \"number\" && typeof color.s === \"number\" && typeof color.l === \"number\" && typeof color.a === \"number\" && typeof color.roundA === \"number\" && typeof color.format === \"string\";\n  };\n  /**\n   * Formats a Color instance into an RGB string.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toString(blue) // \"rgb(0, 153, 255)\"\n   * ```\n   *\n   * @param color - The color to format\n   */\n  Color.toString = color => {\n    return Color.toRgbString(color);\n  };\n  /**\n   * Formats a Color instance into an hexidecimal value.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHex(blue) // \"0099FF\"\n   * Color.toHex(Color(\"#FFAAFF\"), true) // \"FAF\"\n   * ```\n   *\n   * @param color - The color to format\n   * @param allow3Char - If true will return short hand colors if possible (defaults to false).\n   */\n  Color.toHex = (color, allow3Char = false) => {\n    return rgbToHex(color.r, color.g, color.b, allow3Char);\n  };\n  /**\n   * Formats a Color instance into an hexidecimal string.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHexString(blue) // \"#0099FF\"\n   * Color.toHexString(Color(\"#FFAAFF\"), true) // \"#FAF\"\n   * ```\n   *\n   * @param color - The color to format\n   * @param allow3Char - If true will return short hand colors if possible (defaults to false).\n   */\n  Color.toHexString = (color, allow3Char = false) => {\n    return `#${Color.toHex(color, allow3Char)}`;\n  };\n  /**\n   * Formats a Color instance into an RGB string.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toRgbString(blue) // \"rgb(0, 153, 255)\"\n   * ```\n   *\n   * @param color - The color to format\n   */\n  Color.toRgbString = color => {\n    return color.a === 1 ? \"rgb(\" + Math.round(color.r) + \", \" + Math.round(color.g) + \", \" + Math.round(color.b) + \")\" : \"rgba(\" + Math.round(color.r) + \", \" + Math.round(color.g) + \", \" + Math.round(color.b) + \", \" + color.roundA + \")\";\n  };\n  /**\n   * Formats a Color instance into an HUSL object.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHusl(blue) // {h: 250, s: 100, l: 50, a: 1}\n   * ```\n   *\n   * @param color - The color to format\n   */\n  Color.toHusl = color => {\n    return {\n      ...rgbToHsluv(color.r, color.g, color.b),\n      a: color.roundA\n    };\n  };\n  /**\n   * Formats a Color instance into an HSL string.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHslString(blue) // \"hsl(204, 100%, 50%)\"\n   * ```\n   *\n   * @param color - The color to format\n   */\n  Color.toHslString = color => {\n    const hsl = Color.toHsl(color);\n    const h = Math.round(hsl.h);\n    const s = Math.round(hsl.s * 100);\n    const l = Math.round(hsl.l * 100);\n    return color.a === 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + color.roundA + \")\";\n  };\n  /**\n   * Formats a Color instance into an HSV object.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHsv(blue) // {h: 204, s: 1, v: 1, a: 1}\"\n   * ```\n   *\n   * @param color - The color to format\n   */\n  Color.toHsv = color => {\n    const hsv = rgbToHsv(color.r, color.g, color.b);\n    return {\n      h: hsv.h * 360,\n      s: hsv.s,\n      v: hsv.v,\n      a: color.a\n    };\n  };\n  /**\n   * Formats a Color instance into an HSV string.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHslString(blue) // \"hsv(204, 100%, 50%)\"\n   * ```\n   *\n   * @param color - The color to format\n   */\n  Color.toHsvString = color => {\n    const hsv = rgbToHsv(color.r, color.g, color.b);\n    const h = Math.round(hsv.h * 360);\n    const s = Math.round(hsv.s * 100);\n    const v = Math.round(hsv.v * 100);\n    return color.a === 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + color.roundA + \")\";\n  };\n  /**\n   * Formats a Color instance into {@link https://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/ | CSS name}\n   * or returns false if unspecified.\n   *\n   * @remarks\n   * ```jsx\n   * const green = Color(\"#8FBC8F\")\n   *\n   * Color.toName(green) // \"darkseagreen\"\n   * ```\n   *\n   * @param color - The color to format\n   */\n  Color.toName = color => {\n    if (color.a === 0) {\n      return \"transparent\";\n    }\n    if (color.a < 1) {\n      return false;\n    }\n    const hex = rgbToHex(color.r, color.g, color.b, true);\n    for (const key of Object.keys(cssNames)) {\n      const value = cssNames[key];\n      if (value === hex) {\n        return key;\n      }\n    }\n    return false;\n  };\n  /**\n   * Formats a color into an HSL object.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toHsl(blue) // {h: 204, s: 1, l: 0.5, a: 1}\n   * ```\n   *\n   * @param color - The color to format\n   */\n  Color.toHsl = color => {\n    return {\n      h: Math.round(color.h),\n      s: color.s,\n      l: color.l,\n      a: color.a\n    };\n  };\n  /**\n   * Formats a color into an RGB object.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * Color.toRgb(blue) // {r: 40, g: 175, b: 250, a: 1}\n   * ```\n   *\n   * @param color - The color to format\n   */\n  Color.toRgb = color => {\n    return {\n      r: Math.round(color.r),\n      g: Math.round(color.g),\n      b: Math.round(color.b),\n      a: color.a\n    };\n  };\n  /**\n   * Returns a brightened color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const brightblue = Color.lighten(blue, 20)\n   * ```\n   *\n   * @param color - The color to brighten\n   * @param amount - A number, from 0 to 100. Set to 10 by default.\n   */\n  Color.brighten = (color, amount = 10) => {\n    const rgb = Color.toRgb(color);\n    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n    return Color(rgb);\n  };\n  /**\n   * Add white and return a lightened color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const lightblue = Color.lighten(blue, 20)\n   * ```\n   *\n   * @param color - The color to lighten\n   * @param amount - A number, from 0 to 100. Set to 10 by default.\n   */\n  Color.lighten = (color, amount = 10) => {\n    const hsl = Color.toHsl(color);\n    hsl.l += amount / 100;\n    hsl.l = Math.min(1, Math.max(0, hsl.l));\n    return Color(hsl);\n  };\n  /**\n   * Add black and return a darkened color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const darkblue = Color.darken(blue, 20)\n   * ```\n   * @param color - The color to darken.\n   * @param amount - A number, from 0 to 100. Set to 10 by default.\n   */\n  Color.darken = (color, amount = 10) => {\n    const hsl = Color.toHsl(color);\n    hsl.l -= amount / 100;\n    hsl.l = Math.min(1, Math.max(0, hsl.l));\n    return Color(hsl);\n  };\n  /**\n   * Increase the saturation of a color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const saturated = Color.saturate(blue, 100)\n   * ```\n   * @param color - The color to modify\n   * @param amount - A number from 0 to 100. Set to 10 by default.\n   */\n  Color.saturate = (color, amount = 10) => {\n    const hsl = Color.toHsl(color);\n    hsl.s += amount / 100;\n    hsl.s = Math.min(1, Math.max(0, hsl.s));\n    return Color(hsl);\n  };\n  /**\n   * Decrease the saturation of a color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const desaturated = Color.desaturate(blue, 100)\n   * ```\n   * @param color - The color to modify\n   * @param amount - A number from 0 to 100. Set to 10 by default.\n   */\n  Color.desaturate = (color, amount = 10) => {\n    const hsl = Color.toHsl(color);\n    hsl.s -= amount / 100;\n    hsl.s = Math.min(1, Math.max(0, hsl.s));\n    return Color(hsl);\n  };\n  /**\n   * Return a fully desaturated color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const gray = Color.grayscale(blue)\n   * ```\n   * @param color - The color to convert.\n   */\n  Color.grayscale = color => {\n    return Color.desaturate(color, 100);\n  };\n  /**\n   * Returns a new color for the rotated hue.\n   * @param color - The color to manipulate\n   * @param angle - The angle in degrees in which to rotate the hue.\n   */\n  Color.hueRotate = (color, angle) => {\n    const hsl = Color.toHsl(color);\n    hsl.h += angle;\n    hsl.h = hsl.h > 360 ? hsl.h - 360 : hsl.h;\n    return Color(hsl);\n  };\n  /**\n   * Set the alpha value, also known as opacity, of the color.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * const transparent = Color.alpha(blue, 0.1)\n   * ```\n   * @param color - The original color to modify.\n   * @param alpha - A number from 1 to 0. Set to 1 by default.\n   */\n  Color.alpha = (color, a = 1) => {\n    return Color({\n      r: color.r,\n      g: color.g,\n      b: color.b,\n      a: a\n    });\n  };\n  /**\n   * Set the alpha value, also known as opacity, of the color to zero.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   *\n   * const transparent = Color.alpha(blue)\n   * ```\n   * @param color - The original color to modify.\n   */\n  Color.transparent = color => {\n    return Color.alpha(color, 0);\n  };\n  /**\n   * Change the alpha value, also know as opacity, by a multiplier.\n   *\n   * @remarks\n   * ```jsx\n   * const blue = Color(\"#0099FF\")\n   * const transparent = Color.multiplyAlpha(blue, 0.5)\n   * ```\n   * @param color - The original color to modify.\n   * @param alphaValue - A number between 1 and 0, defaults to 1,\n   */\n  Color.multiplyAlpha = (color, alphaValue = 1) => {\n    return Color({\n      r: color.r,\n      g: color.g,\n      b: color.b,\n      a: color.a * alphaValue\n    });\n  };\n  /**\n   * Returns a function that can be used to transition a color from one value\n   * to another. By default this will use the RGB `mix` model. Useful for providing to animation tools.\n   *\n   * ```jsx\n   * const blend = Color.interpolate(Color(\"red\"), Color(\"blue\"))\n   *\n   * blend(0)   // Initial state (red)\n   * blend(0.5) // Mid state (purple)\n   * blend(1)   // Final state (blue)\n   * ```\n   * @param colorA - The starting color\n   * @param colorB - The final color\n   * @param model  - The model to use for the mix. One of {@link ColorMixModelType}\n   */\n  Color.interpolate = (colorA, colorB, model = ColorMixModelType.RGB) => {\n    if (!Color.isColorObject(colorA) || !Color.isColorObject(colorB)) {\n      throw new TypeError(\"Both arguments for Color.interpolate must be Color objects\");\n    }\n    return progress => {\n      const color = Color.mixAsColor(colorA, colorB, progress, false, model);\n      return color;\n    };\n  };\n  /**\n   * Create a function that will mix two colors together and output the result as an rgb string.\n   *\n   * @param colorA - The starting color\n   * @param colorB - The final color\n   * @param options - Options for the color mixer\n   *\n   * - `model`: The model to use for the mix. One of {@link ColorMixModelType}\n   *\n   * @public\n   */\n  Color.mix = (from, toColor, {\n    model = ColorMixModelType.RGB\n  } = {}) => {\n    const fromColor = typeof from === \"string\" ? Color(from) : from;\n    const mixer = Color.interpolate(fromColor, toColor, model);\n    return p => Color.toRgbString(mixer(p));\n  };\n  /**\n   * Blend two colors together, optionally based on user input. The fraction defines the\n   * distribution between the two colors, and is set to 0.5 by default.\n   * The `limit` defines if the color can transition beyond its range.\n   * @remarks\n   * ```jsx\n   * // Mix red with yellow\n   * const orange = Color.mix(\"red\", \"yellow\", 0.5)\n   * ```\n   *\n   * ```jsx\n   * Color.mix(\"red\", \"yellow\", 0.5, true, \"husl\")\n   * ```\n   *\n   * @param colorA   - A color, the first one.\n   * @param colorB   - A color, the second one.\n   * @param fraction - An optional number, from 0 to 1, set to 0.5 by default.\n   * @param limit    - An optional boolean, set to false by default.\n   * @param model    - The model to use for the mix. One of {@link ColorMixModelType}\n   */\n  Color.mixAsColor = (colorA, colorB, fraction = 0.5, limit = false, model = ColorMixModelType.RGB) => {\n    let result = null;\n    if (ColorMixModel.isRGB(model)) {\n      // rgb model\n      result = Color({\n        r: modulate(fraction, [0, 1], [colorA.r, colorB.r], limit),\n        g: modulate(fraction, [0, 1], [colorA.g, colorB.g], limit),\n        b: modulate(fraction, [0, 1], [colorA.b, colorB.b], limit),\n        a: modulate(fraction, [0, 1], [colorA.a, colorB.a], limit)\n      });\n    } else {\n      let hslA, hslB;\n      if (ColorMixModel.isHSL(model)) {\n        // hsl model\n        hslA = Color.toHsl(colorA);\n        hslB = Color.toHsl(colorB);\n      } else {\n        // husl model\n        hslA = Color.toHusl(colorA);\n        hslB = Color.toHusl(colorB);\n      }\n      if (hslA.s === 0) {\n        hslA.h = hslB.h;\n      } else if (hslB.s === 0) {\n        hslB.h = hslA.h;\n      }\n      const fromH = hslA.h;\n      const toH = hslB.h;\n      let deltaH = toH - fromH;\n      if (deltaH > 180) {\n        deltaH = toH - 360 - fromH;\n      } else if (deltaH < -180) {\n        deltaH = toH + 360 - fromH;\n      }\n      const tween = {\n        h: modulate(fraction, [0, 1], [fromH, fromH + deltaH], limit),\n        s: modulate(fraction, [0, 1], [hslA.s, hslB.s], limit),\n        l: modulate(fraction, [0, 1], [hslA.l, hslB.l], limit),\n        a: modulate(fraction, [0, 1], [colorA.a, colorB.a], limit)\n      };\n      if (ColorMixModel.isHSL(model)) {\n        // hsl model\n        result = Color(tween);\n      } else {\n        // husl model\n        result = Color(rgbaFromHusl(tween.h, tween.s, tween.l, tween.a));\n      }\n    }\n    return result;\n  };\n  /**\n   * Returns a Color instance with a random color value set.\n   *\n   * @remarks\n   * ```jsx\n   * const random = Color.random()\n   * ```\n   *\n   * @param alphaValue - An optional alpha value, set to 1 by default.\n   */\n  Color.random = (alphaValue = 1) => {\n    function gen() {\n      return Math.floor(Math.random() * 255);\n    }\n    return Color(\"rgba(\" + gen() + \", \" + gen() + \", \" + gen() + \", \" + alphaValue + \")\");\n  };\n  /**\n   * Creates a greyscale color.\n   *\n   * @remarks\n   * ```jsx\n   * const gray = Color.gray(0.5)\n   * ```\n   *\n   * @param amount - A number from 0 to 1 representing the amount of white.\n   * @param alphaValue  - A number from 0 to 1 representing the alpha. Set to 1 by default.\n   */\n  Color.grey = (amount = 0.5, alphaValue = 1) => {\n    amount = Math.floor(amount * 255);\n    return Color(\"rgba(\" + amount + \", \" + amount + \", \" + amount + \", \" + alphaValue + \")\");\n  };\n  /**\n   * @internal\n   * Alias for {@link (Color:namespace).grey}\n   */\n  Color.gray = Color.grey;\n  /** @internal */\n  Color.rgbToHsl = (r, g, b) => {\n    return rgbToHslConverter(r, g, b);\n  };\n  /** @internal */\n  Color.isValidColorProperty = (name, value) => {\n    const isColorKey = name.toLowerCase().slice(-5) === \"color\" || name === \"fill\" || name === \"stroke\";\n    if (isColorKey && typeof value === \"string\" && Color.isColorString(value)) {\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Calculates the color difference using {@link https://en.wikipedia.org/wiki/Color_difference#Euclidean |\n   * Euclidean distance fitting human perception}. Returns a value between 0 and 765\n   * @param colorA - A first color.\n   * @param colorB - A second color.\n   */\n  Color.difference = (colorA, colorB) => {\n    const _r = (colorA.r + colorB.r) / 2;\n    const deltaR = colorA.r - colorB.r;\n    const deltaG = colorA.g - colorB.g;\n    const deltaB = colorA.b - colorB.b;\n    const deltaR2 = Math.pow(deltaR, 2);\n    const deltaG2 = Math.pow(deltaG, 2);\n    const deltaB2 = Math.pow(deltaB, 2);\n    return Math.sqrt(2 * deltaR2 + 4 * deltaG2 + 3 * deltaB2 + _r * (deltaR2 - deltaB2) / 256);\n  };\n  /**\n   * Checks whether two Color objects are equal.\n   *\n   * @remarks\n   * ```jsx\n   * Color.equal(Color(\"red\"), Color(\"red\"))  // true\n   * Color.equal(Color(\"red\"), Color(\"blue\")) // false\n   *\n   * Color.equal(Color(\"#0099FF\"), Color(\"009AFF\"))    // false\n   * Color.equal(Color(\"#0099FF\"), Color(\"009AFF\"), 2) // true\n   * ```\n   *\n   * @param colorA    - The first color\n   * @param colorB    - The second color\n   * @param tolerance - A tolerance for the difference between rgba values. Set to 0.1 by default.\n   */\n  Color.equal = (colorA, colorB, tolerance = 0.1) => {\n    if (Math.abs(colorA.r - colorB.r) >= tolerance) {\n      return false;\n    }\n    if (Math.abs(colorA.g - colorB.g) >= tolerance) {\n      return false;\n    }\n    if (Math.abs(colorA.b - colorB.b) >= tolerance) {\n      return false;\n    }\n    if (Math.abs(colorA.a - colorB.a) * 256 >= tolerance) {\n      return false;\n    }\n    return true;\n  };\n  const channelToDecimal = interpolate([0, 255], [0, 1]);\n  function convertChannelToLinearRgb(channel) {\n    channel = channelToDecimal(channel);\n    const abs = Math.abs(channel);\n    if (abs < 0.04045) return channel / 12.92;\n    return (Math.sign(channel) || 1) * Math.pow((abs + 0.055) / 1.055, 2.4);\n  }\n  /*\n   * WCAG luminance References:\n   *\n   * https://en.wikipedia.org/wiki/Relative_luminance\n   * https://github.com/w3c/wcag/issues/236#issuecomment-379526596\n   */\n  Color.luminance = color => {\n    const {\n      r,\n      g,\n      b\n    } = Color.toRgb(color);\n    return 0.2126 * convertChannelToLinearRgb(r) + 0.7152 * convertChannelToLinearRgb(g) + 0.0722 * convertChannelToLinearRgb(b);\n  };\n  Color.contrast = (a, b) => {\n    const l1 = Color.luminance(a);\n    const l2 = Color.luminance(b);\n    return (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05);\n  };\n  return Color;\n})();\n// helpers\nfunction getCompleteColorStrategy(colorOrR, g, b, a = 1) {\n  let completeColor;\n  // RGB arguments have higher priority\n  if (typeof colorOrR === \"number\" && !Number.isNaN(colorOrR) && typeof g === \"number\" && !Number.isNaN(g) && typeof b === \"number\" && !Number.isNaN(b)) {\n    // color used as red - Color(255, 255, 255)\n    const _r = colorOrR;\n    const _g = g;\n    const _b = b;\n    const _a = a;\n    completeColor = getCompleteColorFromRGB({\n      r: _r,\n      g: _g,\n      b: _b,\n      a: _a\n    });\n  } else if (typeof colorOrR === \"string\") {\n    // valid CSS color (including functions)\n    completeColor = getCompleteColorFromString(colorOrR);\n  } else if (typeof colorOrR === \"object\") {\n    // eslint-disable-next-line no-prototype-builtins\n    if (colorOrR.hasOwnProperty(\"r\") && colorOrR.hasOwnProperty(\"g\") && colorOrR.hasOwnProperty(\"b\")) {\n      completeColor = getCompleteColorFromRGB(colorOrR);\n    } else {\n      completeColor = getCompleteColorFromHSL(colorOrR);\n    }\n  }\n  return completeColor;\n}\nfunction getCompleteColorFromString(color) {\n  const result = stringToObject(color);\n  if (result) {\n    if (result.format === ColorFormat.HSL) {\n      return getCompleteColorFromHSL(result);\n    } else if (result.format === ColorFormat.HSV) {\n      return getCompleteColorFromHSV(result);\n    } else {\n      return getCompleteColorFromRGB(result);\n    }\n  }\n}\nfunction getCompleteColorFromHSV(color) {\n  const rgb = hsvToRgb(color.h, color.s, color.v);\n  const hsl = rgbToHslConverter(rgb.r, rgb.g, rgb.b);\n  return {\n    ...hsl,\n    ...rgb,\n    format: ColorFormat.RGB,\n    a: color.a !== undefined ? correctAlpha(color.a) : 1\n  };\n}\nfunction getCompleteColorFromRGB(color) {\n  const rgb = rgbToRgb(color.r, color.g, color.b);\n  const hsl = rgbToHslConverter(rgb.r, rgb.g, rgb.b);\n  return {\n    ...hsl,\n    ...rgb,\n    format: ColorFormat.RGB,\n    a: color.a !== undefined ? correctAlpha(color.a) : 1\n  };\n}\nfunction getCompleteColorFromHSL(color) {\n  let h;\n  let s;\n  let l;\n  let rgb = {\n    r: 0,\n    g: 0,\n    b: 0\n  };\n  let hsl = {\n    h: 0,\n    s: 0,\n    l: 0\n  };\n  h = isNumeric(color.h) ? color.h : 0;\n  h = (h + 360) % 360;\n  s = isNumeric(color.s) ? color.s : 1;\n  if (typeof color.s === \"string\") {\n    s = numberFromString(color.s);\n  }\n  l = isNumeric(color.l) ? color.l : 0.5;\n  if (typeof color.l === \"string\") {\n    l = numberFromString(color.l);\n  }\n  rgb = hslToRgb(h, s, l);\n  hsl = {\n    h: h,\n    s: s,\n    l: l\n  };\n  return {\n    ...rgb,\n    ...hsl,\n    a: color.a === undefined ? 1 : color.a,\n    format: ColorFormat.HSL\n  };\n}\nfunction correctAlpha(alphaValue) {\n  alphaValue = parseFloat(alphaValue);\n  if (alphaValue < 0) {\n    alphaValue = 0;\n  }\n  if (isNaN(alphaValue) || alphaValue > 1) {\n    alphaValue = 1;\n  }\n  return alphaValue;\n}","map":{"version":3,"names":["interpolate","hslToRgb","hsvToRgb","rgbaFromHusl","rgbToHex","rgbToHsl","rgbToHslConverter","rgbToHsluv","rgbToHsv","rgbToRgb","stringToObject","cssNames","ColorFormat","ColorMixModelType","isNumeric","modulate","numberFromString","cache","Map","Color","color","r","g","b","c","get","createColor","undefined","isValid","set","created","colorData","getCompleteColorStrategy","newColor","a","h","s","l","initialValue","format","HSV","roundA","Math","round","mix","toValue","toRgbString","ColorMixModel","isRGB","colorModel","RGB","RGBA","isHSL","HSL","HSLA","inspect","constructor","name","HEX","NAME","isColor","isColorString","isColorObject","colorString","toString","toHex","allow3Char","toHexString","toHusl","toHslString","hsl","toHsl","toHsv","hsv","v","toHsvString","toName","hex","key","Object","keys","value","toRgb","brighten","amount","rgb","max","min","lighten","darken","saturate","desaturate","grayscale","hueRotate","angle","alpha","transparent","multiplyAlpha","alphaValue","colorA","colorB","model","TypeError","progress","mixAsColor","from","toColor","fromColor","mixer","p","fraction","limit","result","hslA","hslB","fromH","toH","deltaH","tween","random","gen","floor","grey","gray","isValidColorProperty","isColorKey","toLowerCase","slice","difference","_r","deltaR","deltaG","deltaB","deltaR2","pow","deltaG2","deltaB2","sqrt","equal","tolerance","abs","channelToDecimal","convertChannelToLinearRgb","channel","sign","luminance","contrast","l1","l2","colorOrR","completeColor","Number","isNaN","_g","_b","_a","getCompleteColorFromRGB","getCompleteColorFromString","hasOwnProperty","getCompleteColorFromHSL","getCompleteColorFromHSV","correctAlpha","parseFloat"],"sources":["../../../../src/render/types/Color/Color.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}