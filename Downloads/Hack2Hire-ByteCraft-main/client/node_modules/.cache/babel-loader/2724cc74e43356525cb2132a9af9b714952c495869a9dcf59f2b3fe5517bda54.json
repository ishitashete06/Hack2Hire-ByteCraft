{"ast":null,"code":"import { roundWithOffset } from \"../utils/roundedNumber.js\";\n/**\n * @public\n */\nfunction Point(x, y) {\n  return {\n    x,\n    y\n  };\n}\n/**\n * @public\n */\n(function (Point) {\n  /** @internal */\n  Point.add = (...args) => {\n    return args.reduce((previousValue, currentValue) => {\n      return {\n        x: previousValue.x + currentValue.x,\n        y: previousValue.y + currentValue.y\n      };\n    }, {\n      x: 0,\n      y: 0\n    });\n  };\n  /** @internal */\n  Point.subtract = (a, b) => {\n    return {\n      x: a.x - b.x,\n      y: a.y - b.y\n    };\n  };\n  /** @internal */\n  Point.multiply = (a, b) => {\n    return {\n      x: a.x * b,\n      y: a.y * b\n    };\n  };\n  /** @internal */\n  Point.divide = (a, b) => {\n    return {\n      x: a.x / b,\n      y: a.y / b\n    };\n  };\n  /** @internal */\n  Point.absolute = point => {\n    return {\n      x: Math.abs(point.x),\n      y: Math.abs(point.y)\n    };\n  };\n  /** @internal */\n  Point.reverse = point => {\n    return {\n      x: point.x * -1,\n      y: point.y * -1\n    };\n  };\n  /** @internal */\n  Point.pixelAligned = (point, offset = {\n    x: 0,\n    y: 0\n  }) => {\n    return {\n      x: roundWithOffset(point.x, offset.x),\n      y: roundWithOffset(point.y, offset.y)\n    };\n  };\n  /** @internal */\n  Point.distance = (a, b) => {\n    const deltaX = Math.abs(a.x - b.x);\n    const deltaY = Math.abs(a.y - b.y);\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  };\n  /** @internal */\n  Point.angle = (a, b) => {\n    return Math.atan2(b.y - a.y, b.x - a.x) * 180 / Math.PI - 90;\n  };\n  /** @public */\n  Point.isEqual = (a, b) => {\n    return a.x === b.x && a.y === b.y;\n  };\n  /** @internal */\n  Point.rotationNormalizer = () => {\n    let lastValue;\n    return value => {\n      if (typeof lastValue !== \"number\") {\n        lastValue = value;\n      }\n      const diff = lastValue - value;\n      const maxDiff = Math.abs(diff) + 180;\n      const nTimes = Math.floor(maxDiff / 360);\n      if (diff < 180) {\n        value -= nTimes * 360;\n      }\n      if (diff > 180) {\n        value += nTimes * 360;\n      }\n      lastValue = value;\n      return value;\n    };\n  };\n  /** @internal */\n  function center(a, b) {\n    return {\n      x: (a.x + b.x) / 2,\n      y: (a.y + b.y) / 2\n    };\n  }\n  Point.center = center;\n})(Point || (Point = {}));\nexport { Point };","map":{"version":3,"names":["roundWithOffset","Point","x","y","add","args","reduce","previousValue","currentValue","subtract","a","b","multiply","divide","absolute","point","Math","abs","reverse","pixelAligned","offset","distance","deltaX","deltaY","sqrt","angle","atan2","PI","isEqual","rotationNormalizer","lastValue","value","diff","maxDiff","nTimes","floor","center"],"sources":["../../../src/render/types/Point.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}