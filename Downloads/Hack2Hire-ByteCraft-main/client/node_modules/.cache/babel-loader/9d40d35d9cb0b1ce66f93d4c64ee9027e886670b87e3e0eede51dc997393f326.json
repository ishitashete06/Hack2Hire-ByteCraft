{"ast":null,"code":"import React from \"react\";\nimport { useOnCurrentTargetChange } from \"../components/NavigationTargetContext.js\";\nimport { useConstant } from \"../components/utils/useConstant.js\";\nimport { safeWindow } from \"../utils/safeWindow.js\";\nimport { isObject } from \"../utils/utils.js\";\n/** @internal */\nexport function isFramerGamepadKeydownData(value) {\n  return isObject(value) && value.mapping !== undefined;\n}\nfunction gamepadInputsHaveChanged(previous, current) {\n  if (previous.length !== current.length) return true;\n  if (!previous.every((item, i) => current[i] === item)) return true;\n  return false;\n}\n/**\n * Exported for testing.\n * @internal\n */\nexport function createGamepadPoller() {\n  const handlers = new Set();\n  let isConnected = false;\n  let isPolling = null;\n  let lastKeys = [];\n  const startPolling = () => {\n    const input = getGamepadInputs();\n    // Don't do anything if no gamepad is connected\n    if (!input) return;\n    const {\n      gamepad,\n      inputs\n    } = input;\n    const {\n      mapping,\n      id\n    } = gamepad;\n    // Each frame only knows its own last pressed key. If two continuous\n    // frames both have gamepad events binding on the same key, we don't\n    // want to fire two events in a row.\n    if (gamepadInputsHaveChanged(lastKeys, inputs)) handlers.forEach(handler => handler({\n      inputs,\n      mapping,\n      id\n    }));\n    lastKeys = inputs;\n    isPolling = safeWindow.requestAnimationFrame(startPolling);\n  };\n  const handleConnection = () => {\n    if (isConnected || isPolling) return;\n    startPolling();\n    isConnected = true;\n  };\n  const stopPolling = () => {\n    if (!isPolling) return;\n    safeWindow.cancelAnimationFrame(isPolling);\n    isPolling = null;\n  };\n  const handleDisconnection = () => {\n    if (!isConnected) return;\n    stopPolling();\n    isConnected = false;\n  };\n  const setupAndStartPolling = () => {\n    if (isPolling) return;\n    const gamepad = getGamepadInputs();\n    if (!gamepad) {\n      // @NOTE: gamepadconnected only exists on window\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/gamepadconnected_event\n      safeWindow.addEventListener(\"gamepadconnected\", handleConnection);\n      return;\n    }\n    // Even if we haven't connected yet, we need to make sure we disconnect\n    // in the future.\n    safeWindow.addEventListener(\"gamepaddisconnected\", handleDisconnection);\n    isConnected = true;\n    startPolling();\n  };\n  const cleanupAndStopPolling = () => {\n    if (!isPolling) return;\n    // If the gamepad is already connected, then this event has no use\n    // anymore; if the gamepad is not connected yet, we will only listen to\n    // it when start polling. So we should remove the event listener anyway.\n    safeWindow.removeEventListener(\"gamepadconnected\", handleConnection);\n    safeWindow.removeEventListener(\"gamepaddisconnected\", handleDisconnection);\n    stopPolling();\n  };\n  return {\n    register(callback) {\n      if (handlers.size === 0) setupAndStartPolling();\n      handlers.add(callback);\n    },\n    unregister(callback) {\n      handlers.delete(callback);\n      if (handlers.size === 0) cleanupAndStopPolling();\n    }\n  };\n}\nconst gamepadPoller = /* @__PURE__ */createGamepadPoller();\n/** @internal */\nexport const GamepadContext = /* @__PURE__ */React.createContext(gamepadPoller);\n/**\n * Return the first gamepad that has input together with the input keys. If\n * there's no input, return the first available gamepad. If there's no gamepad\n * connected, return null.\n */\nfunction getGamepadInputs() {\n  let firstConnectedGamepad = null;\n  const gamepads = navigator.getGamepads();\n  for (const gamepad of gamepads) {\n    if (!gamepad) continue;\n    if (!firstConnectedGamepad) firstConnectedGamepad = gamepad;\n    const inputs = [...scanPressedAxis(gamepad), ...scanPressedButtons(gamepad)];\n    if (inputs.length > 0) return {\n      gamepad,\n      inputs\n    };\n  }\n  if (firstConnectedGamepad) return {\n    gamepad: firstConnectedGamepad,\n    inputs: []\n  };\n  return null;\n}\nfunction scanPressedAxis(gamepad) {\n  const axes = [];\n  for (const [idx, axis] of gamepad.axes.entries()) {\n    // Normally axis 0&1 are allocated for the left stick, and 3&4 for the\n    // right stick. Depending on the browser, some controllers can have more\n    // than 4 axes. For example, in safari, a PS5 Dualsense controller has\n    // its axis 4&5 for the left/right triggers, that are set to -1 when\n    // idling. We don't want these axes to be taken as pressed.\n    if (idx > 3) continue;\n    if (axis <= -0.5) axes.push(`Axis ${idx}-`);\n    if (axis > 0.5) axes.push(`Axis ${idx}+`);\n  }\n  return axes;\n}\nfunction scanPressedButtons(gamepad) {\n  const buttons = [];\n  for (const [idx, button] of gamepad.buttons.entries()) {\n    if (isButtonPressed(button)) buttons.push(`Button ${idx}`);\n  }\n  return buttons;\n}\nfunction isButtonPressed(button) {\n  // button.value represents the current state of analog buttons\n  return button.pressed === true || button.value > 0;\n}\n/**\n * Register a callback to be executed when a gamepad button is pressed and the\n * registering component is in the current Framer navigation target. Optionally\n * provide a specific gamepad mapping, or flag the hook to operate on keyup.\n *\n *  @public\n */\nexport function useGamepad(input, callback, {\n  mapping,\n  on\n} = {}) {\n  const context = React.useContext(GamepadContext);\n  const settings = useConstant(() => ({\n    mapping: mapping ?? \"standard\",\n    on: on ?? \"keydown\"\n  }));\n  const stateRef = React.useRef({\n    pressed: false,\n    handler: callback\n  });\n  const cb = React.useCallback(gamepad => {\n    const {\n      pressed,\n      handler\n    } = stateRef.current;\n    if (gamepad.inputs.includes(input) && settings.mapping === gamepad.mapping) {\n      settings.on === \"keydown\" && handler();\n      stateRef.current.pressed = true;\n    } else if (pressed) {\n      settings.on === \"keyup\" && handler();\n      stateRef.current.pressed = false;\n    }\n  }, [input, settings]);\n  useOnCurrentTargetChange((isInTarget, isOverlayed) => {\n    const isActive = isInTarget && !isOverlayed;\n    if (isActive) {\n      context.register(cb);\n    } else {\n      context.unregister(cb);\n    }\n    // Unregister the callback when the screen unmounts. This is probably\n    // unnecessary since we unregister the callback when the component\n    // unmounts, but may catch instances where the screen is being unmounted\n    // with AnimatePresence and hasn't yet been removed from the react tree.\n    return () => context.unregister(cb);\n  }, []);\n  // Unregister the callback when unmounted.\n  React.useEffect(() => {\n    return () => context.unregister(cb);\n  }, [cb, context]);\n  // Maintain an up to date reference to the provided callback. This prevents\n  // users from being forced to create a memoized callback with useCallback\n  // and React refs.\n  React.useEffect(() => {\n    stateRef.current.handler = callback;\n  }, [callback]);\n}","map":{"version":3,"names":["React","useOnCurrentTargetChange","useConstant","safeWindow","isObject","isFramerGamepadKeydownData","value","mapping","undefined","gamepadInputsHaveChanged","previous","current","length","every","item","i","createGamepadPoller","handlers","Set","isConnected","isPolling","lastKeys","startPolling","input","getGamepadInputs","gamepad","inputs","id","forEach","handler","requestAnimationFrame","handleConnection","stopPolling","cancelAnimationFrame","handleDisconnection","setupAndStartPolling","addEventListener","cleanupAndStopPolling","removeEventListener","register","callback","size","add","unregister","delete","gamepadPoller","GamepadContext","createContext","firstConnectedGamepad","gamepads","navigator","getGamepads","scanPressedAxis","scanPressedButtons","axes","idx","axis","entries","push","buttons","button","isButtonPressed","pressed","useGamepad","on","context","useContext","settings","stateRef","useRef","cb","useCallback","includes","isInTarget","isOverlayed","isActive","useEffect"],"sources":["../../src/modules/useGamepad.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}