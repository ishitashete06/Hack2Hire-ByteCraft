{"ast":null,"code":"import { isBrowser } from \"../../utils/environment.js\";\nimport { hash } from \"../../utils/string.js\";\nconst useDOM = isBrowser();\nclass SharedSVGEntry {\n  id;\n  svg;\n  innerHTML;\n  viewBox;\n  count;\n  constructor(id, svg, innerHTML, viewBox, count = 0) {\n    this.id = id;\n    this.svg = svg;\n    this.innerHTML = innerHTML;\n    this.viewBox = viewBox;\n    this.count = count;\n  }\n}\n/** Complex SVGs are placed once in an invisible div and used as a template for all instances.\n * Notice the manager uses the svg string itself as the key to manage global instances with. */\nclass SharedSVGManager {\n  entries = new Map();\n  debugGetEntries() {\n    return this.entries;\n  }\n  /** Request to render a svg, this will ensure there is a global instance and will return a\n   * template referencing the image. Must be balanced with `unsubscribe()` calls using the same\n   * svg. If called multiple times while the shared SVG exists, the generateUniqueIds and\n   * contentId parameters are ignored. */\n  subscribe(svg, generateUniqueIds, contentId) {\n    if (!svg || svg === \"\") return \"\";\n    let entry = this.entries.get(svg);\n    if (!entry) {\n      // Create a new entry, computing a content id if needed, rewriting ids to be globally\n      // unique if needed.\n      if (!contentId) {\n        contentId = \"svg\" + String(hash(svg)) + \"_\" + String(svg.length);\n      }\n      let uniqueSVG = svg;\n      let svgSize;\n      const svgDom = parseSVG(svg);\n      if (svgDom) {\n        if (generateUniqueIds) {\n          prefixIdsInSVG(svgDom, contentId);\n        }\n        svgDom.id = contentId;\n        svgSize = getSVGSize(svgDom);\n        uniqueSVG = svgDom.outerHTML;\n      }\n      entry = this.createDOMElementFor(uniqueSVG, contentId, svgSize);\n      this.entries.set(svg, entry);\n    }\n    entry.count += 1;\n    return entry.innerHTML;\n  }\n  /** Returns the viewBox for the svg, or undefined if there is no viewBox. */\n  getViewBox(svg) {\n    if (!svg || svg === \"\") return;\n    const entry = this.entries.get(svg);\n    return entry?.viewBox;\n  }\n  /** When no longer rendering an svg it must be unsubscribed from so resources can be cleaned up.\n   * Pass in the same svg as used with `subscribe()`. */\n  unsubscribe(svg) {\n    if (!svg || svg === \"\") return;\n    const entry = this.entries.get(svg);\n    if (!entry) return;\n    entry.count -= 1;\n    if (entry.count > 0) return;\n    // When the last use of the svg goes away, after a delay, we see if it should be removed.\n    setTimeout(() => this.maybeRemoveEntry(svg), 5000);\n  }\n  maybeRemoveEntry(svg) {\n    const entry = this.entries.get(svg);\n    if (!entry) return;\n    if (entry.count > 0) return;\n    this.entries.delete(svg);\n    this.removeDOMElement(entry);\n  }\n  removeDOMElement(entry) {\n    const containerId = \"container_\" + entry.id;\n    if (useDOM) {\n      const container = document?.querySelector(\"#\" + containerId);\n      container?.remove();\n    }\n  }\n  createDOMElementFor(svg, id, size) {\n    const containerId = \"container_\" + id;\n    if (useDOM) {\n      let svgTemplates = document.querySelector(\"#svg-templates\");\n      if (!svgTemplates) {\n        svgTemplates = document.createElement(\"div\");\n        svgTemplates.id = \"svg-templates\";\n        svgTemplates.style.position = \"absolute\";\n        svgTemplates.style.top = \"0\";\n        svgTemplates.style.left = \"0\";\n        svgTemplates.style.width = \"0\";\n        svgTemplates.style.height = \"0\";\n        svgTemplates.style.overflow = \"hidden\";\n        document.body.appendChild(svgTemplates);\n      }\n      if (!document.querySelector(\"#\" + containerId)) {\n        const container = document.createElement(\"div\");\n        container.id = containerId;\n        container.innerHTML = svg;\n        if (container.firstElementChild) {\n          container.firstElementChild.id = id;\n        }\n        svgTemplates.appendChild(container);\n      }\n    }\n    // An svg referencing a shared template by id. For firefox, if the SVG has a width/height, we use that as our viewBox.\n    const box = size ? `0 0 ${size.width} ${size.height}` : undefined;\n    const viewBox = box ? ` viewBox=\"${box}\"` : \"\";\n    const innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"width: 100%; height: 100%\"${viewBox}><use href=\"#${id}\"></use></svg>`;\n    return new SharedSVGEntry(id, svg, innerHTML, box);\n  }\n  clear() {\n    this.entries.clear();\n  }\n  /** Returns a string containing a div#svg-templates and all the current svg templates. Can be\n   * used after running `ReactDOMServer.renderToString()` */\n  generateTemplates() {\n    const output = [];\n    const style = \"position: absolute; overflow: hidden; top: 0; left: 0; width: 0; height: 0\";\n    output.push(`<div id=\"svg-templates\" style=\"${style}\">`);\n    for (const value of this.entries.values()) {\n      const containerId = \"container_\" + value.id;\n      output.push(`  <div id=\"${containerId}\">`);\n      output.push(`    ${value.svg}`);\n      output.push(\"  </div>\");\n    }\n    output.push(\"</div>\");\n    return output.join(\"\\n\");\n  }\n}\n/**\n * @internal\n */\nexport const sharedSVGManager = /* @__PURE__ */new SharedSVGManager();\n// SVG Helper methods\nexport function parseSVG(svg) {\n  if (typeof DOMParser === \"undefined\") {\n    // eslint-disable-next-line no-console\n    console.warn(\"unable to find DOMParser\");\n    return;\n  }\n  try {\n    const domParser = new DOMParser();\n    // We parse SVGs as text/html. That is more forgiving and the Deno DOMParser so far doesn't\n    // support image/xml-svg. Output will differ slightly like elements don't autoclose: eg\n    // instead of `<path .../>` it will become `<path ...></path>`.\n    const doc = domParser.parseFromString(svg, \"text/html\");\n    const node = doc.getElementsByTagName(\"svg\")[0];\n    if (!node) throw Error(\"no svg element found\");\n    return node;\n  } catch {\n    // ignore errors\n    return;\n  }\n}\n/* Takes an SVG string and prefix all the ids and their occurrence with the given string */\nexport function prefixIdsInSVG(svg, prefix) {\n  const sanitizedPrefix = sanitizeString(prefix);\n  recursivelyPrefixId(svg, sanitizedPrefix);\n}\n// Valid SVG IDs only include designated characters (letters, digits, and a few punctuation marks),\n// and do not start with a digit, a full stop (.) character, or a hyphen-minus (-) character.\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/id\nfunction sanitizeString(str) {\n  return str.replace(/[^a-z0-9\\-_:.]|^[^a-z]+/gi, \"\"); // source: https://stackoverflow.com/a/9635731/9300219\n}\nfunction recursivelyPrefixId(el, prefix) {\n  // element itself\n  prefixId(el, prefix);\n  // handle children\n  const childNodes = Array.from(el.children);\n  childNodes.forEach(node => {\n    recursivelyPrefixId(node, prefix);\n  });\n}\nfunction prefixId(el, prefix) {\n  const attributes = el.getAttributeNames();\n  attributes.forEach(attr => {\n    const value = el.getAttribute(attr);\n    if (!value) return;\n    // prefix the id\n    if (attr === \"id\") {\n      el.setAttribute(attr, `${prefix}_${value}`);\n    }\n    // prefix occurrence in href (SVG2) or xlink:href\n    if (attr === \"href\" || attr === \"xlink:href\") {\n      const [base, fragmentIdentifier] = value.split(\"#\");\n      // The value might have a base URL in two cases:\n      // 1. It's a hyperlink\n      // 2. It's referencing the fragment from another document\n      // In both cases we don't want to touch the value\n      if (base) return;\n      el.setAttribute(attr, `#${prefix}_${fragmentIdentifier}`);\n      return;\n    }\n    // prefix occurrence in url()\n    const URL_REF = \"url(#\";\n    if (value.includes(URL_REF)) {\n      const prefixedValue = value.replace(URL_REF, `${URL_REF}${prefix}_`);\n      el.setAttribute(attr, prefixedValue);\n    }\n  });\n}\n// Absolute units converted to px according to the CSS3 specification:\n// https://www.w3.org/TR/css-values-3/#absolute-lengths\n// (1 inch is 2.54 centimeters is 96 pixels)\nconst unitsToPixels = {\n  cm: 96 / 2.54,\n  mm: 96 / 2.54 / 10,\n  Q: 96 / 2.54 / 40,\n  in: 96,\n  pc: 96 / 6,\n  pt: 96 / 72,\n  px: 1,\n  // A few assumptions about relative units.\n  em: 16,\n  ex: 8,\n  ch: 8,\n  rem: 16\n};\n/** Parses values like 10cm in `<svg ... width=\"10cm\" ...>` turning them into pixel sizes. Ignoring\n * percentage values or unparsable values. Should at least parse anything browsers parse. */\nfunction parseLength(value) {\n  if (!value) return;\n  const m = /(-?[0-9.]+)([a-z%]*)/.exec(value);\n  if (m?.[1] === undefined || m?.[2] === undefined) return;\n  if (m[2]?.startsWith(\"%\")) return;\n  return Math.round(parseFloat(m[1]) * (unitsToPixels[m[2]] || 1));\n}\n/** Tries to return something sensible from the <svg width=\"X\" height=\"X\"> attributes. We use that\n * to give the outer svg a matching viewbox.\n *\n * Note, this is not a perfect solution. Ideally we know our SVGs better and we only use viewBoxes,\n * removed any percentage based sizes, etc. But at least we should be consistent between how canvas,\n * preview, and publish render.\n * */\nexport function getSVGSize(svg) {\n  const width = parseLength(svg.getAttribute(\"width\"));\n  const height = parseLength(svg.getAttribute(\"height\"));\n  if (typeof width !== \"number\" || typeof height !== \"number\") return;\n  if (width <= 0 || height <= 0) return;\n  return {\n    width,\n    height\n  };\n}","map":{"version":3,"names":["isBrowser","hash","useDOM","SharedSVGEntry","id","svg","innerHTML","viewBox","count","constructor","SharedSVGManager","entries","Map","debugGetEntries","subscribe","generateUniqueIds","contentId","entry","get","String","length","uniqueSVG","svgSize","svgDom","parseSVG","prefixIdsInSVG","getSVGSize","outerHTML","createDOMElementFor","set","getViewBox","unsubscribe","setTimeout","maybeRemoveEntry","delete","removeDOMElement","containerId","container","document","querySelector","remove","size","svgTemplates","createElement","style","position","top","left","width","height","overflow","body","appendChild","firstElementChild","box","undefined","clear","generateTemplates","output","push","value","values","join","sharedSVGManager","DOMParser","console","warn","domParser","doc","parseFromString","node","getElementsByTagName","Error","prefix","sanitizedPrefix","sanitizeString","recursivelyPrefixId","str","replace","el","prefixId","childNodes","Array","from","children","forEach","attributes","getAttributeNames","attr","getAttribute","setAttribute","base","fragmentIdentifier","split","URL_REF","includes","prefixedValue","unitsToPixels","cm","mm","Q","in","pc","pt","px","em","ex","ch","rem","parseLength","m","exec","startsWith","Math","round","parseFloat"],"sources":["../../../src/render/presentation/SharedSVGManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}