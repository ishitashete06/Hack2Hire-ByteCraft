{"ast":null,"code":"import { TypefaceSourceNames } from \"./types.js\";\nexport const customFontSelectorPrefix = \"CUSTOM;\";\n/**\n * Parses and returns the custom font filename if no properties were provided.\n * With properties provided, the preferred family and sub family are chosen over the base font family.\n * */\nfunction getCustomFontName(fileName, properties) {\n  if (!properties) return fileName.substring(0, fileName.lastIndexOf(\".\"));\n  const fontFamily = properties.font.preferredFamily === \"\" ? properties.font.fontFamily : properties.font.preferredFamily;\n  // This variant can be used for custom font grouping\n  const variant = properties.font.preferredSubFamily === \"\" ? properties.font.fontSubFamily : properties.font.preferredSubFamily;\n  return `${fontFamily} ${variant}`;\n}\n/** @internal */\nexport class CustomFontSource {\n  name = TypefaceSourceNames.Custom;\n  typefaces = [];\n  byFamily = new Map();\n  assetsByFamily = new Map();\n  importFonts(assets) {\n    this.typefaces.length = 0;\n    this.byFamily.clear();\n    this.assetsByFamily.clear();\n    const fonts = [];\n    assets.forEach(asset => {\n      if (!this.isValidCustomFontAsset(asset)) {\n        return;\n      }\n      const fontName = getCustomFontName(asset.name, asset.properties);\n      const typeface = this.createTypeface(fontName);\n      const font = {\n        typeface,\n        selector: `${customFontSelectorPrefix}${fontName}`,\n        variant: this.inferVariantName(fontName),\n        postscriptName: asset.properties?.font.postscriptName,\n        file: asset.url\n      };\n      typeface.fonts.push(font);\n      typeface.owner = asset.ownerType === \"team\" ? \"team\" : \"project\";\n      this.assetsByFamily.set(fontName, asset);\n      fonts.push(...typeface.fonts);\n    });\n    return fonts;\n  }\n  isValidCustomFontAsset(asset) {\n    if (!asset.mimeType.startsWith(\"font/\")) return false;\n    if (asset.properties?.kind !== \"font\") return false;\n    if (!asset.properties.font) return false;\n    return \"fontFamily\" in asset.properties.font;\n  }\n  inferVariantName(family) {\n    const possibleValues = [\"thin\", \"ultra light\", \"extra light\", \"light\", \"normal\", \"medium\", \"semi bold\", \"bold\", \"extra bold\", \"black\"];\n    const possibleValuesWithItalics = [...possibleValues.map(value => `${value} italic`), ...possibleValues];\n    const lowerCaseFamily = family.toLowerCase();\n    const tokens = [...lowerCaseFamily.split(\" \"), ...lowerCaseFamily.split(\"-\"), ...lowerCaseFamily.split(\"_\")];\n    const foundToken = possibleValuesWithItalics.find(value => tokens.includes(value) || tokens.includes(value.replace(/\\s+/g, \"\")));\n    // Return found token with each letter capitalized\n    if (foundToken) return foundToken.replace(/(^\\w|\\s\\w)/g, char => char.toUpperCase());\n    return \"Regular\";\n  }\n  createTypeface(family) {\n    const existingTypeface = this.byFamily.get(family);\n    if (existingTypeface) return existingTypeface;\n    const typeface = {\n      source: this.name,\n      family,\n      fonts: []\n    };\n    this.addTypeface(typeface);\n    return typeface;\n  }\n  addTypeface(typeface) {\n    this.typefaces.push(typeface);\n    this.byFamily.set(typeface.family, typeface);\n  }\n  parseSelector(selector) {\n    if (!selector.startsWith(customFontSelectorPrefix)) return null;\n    const tokens = selector.split(customFontSelectorPrefix);\n    if (tokens[1] === undefined) return null;\n    const locator = {\n      source: \"custom\",\n      family: tokens[1]\n    };\n    return locator;\n  }\n  getFontBySelector(selector, createFont = true) {\n    const locator = this.parseSelector(selector);\n    if (!locator) return;\n    if (!createFont && !this.byFamily.get(locator.family)) return;\n    return this.getTypefaceByFamily(locator.family).fonts[0];\n  }\n  getTypefaceByFamily(family) {\n    const foundTypeface = this.byFamily.get(family);\n    if (foundTypeface) return foundTypeface;\n    const typeface = {\n      source: \"custom\",\n      family,\n      fonts: []\n    };\n    typeface.fonts.push({\n      selector: `${customFontSelectorPrefix}${family}`,\n      variant: this.inferVariantName(family),\n      typeface\n    });\n    return typeface;\n  }\n}","map":{"version":3,"names":["TypefaceSourceNames","customFontSelectorPrefix","getCustomFontName","fileName","properties","substring","lastIndexOf","fontFamily","font","preferredFamily","variant","preferredSubFamily","fontSubFamily","CustomFontSource","name","Custom","typefaces","byFamily","Map","assetsByFamily","importFonts","assets","length","clear","fonts","forEach","asset","isValidCustomFontAsset","fontName","typeface","createTypeface","selector","inferVariantName","postscriptName","file","url","push","owner","ownerType","set","mimeType","startsWith","kind","family","possibleValues","possibleValuesWithItalics","map","value","lowerCaseFamily","toLowerCase","tokens","split","foundToken","find","includes","replace","char","toUpperCase","existingTypeface","get","source","addTypeface","parseSelector","undefined","locator","getFontBySelector","createFont","getTypefaceByFamily","foundTypeface"],"sources":["../../../src/render/fonts/CustomFontSource.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}